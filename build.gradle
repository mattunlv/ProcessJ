/**
 * <p>Specifies the build & test steps for the ProcessJ Compiler.</p>
 * @author Carlos L. Cuenca
 * @version 1.0.0
 * @since 0.1.0
 */

/** --------------------------------------------------------------------------------------------------------------- **/
/** Plugins, Repositories, & Language Settings                                                                      **/
/** --------------------------------------------------------------------------------------------------------------- **/

plugins {

    id 'java'

}

repositories {

    mavenCentral()

}

java {

    toolchain {

        languageVersion.set(JavaLanguageVersion.of(17))

    }

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Package Info                                                                                                    **/
/** --------------------------------------------------------------------------------------------------------------- **/

group 'org.processj'
version '0.1.0'

/** --------------------------------------------------------------------------------------------------------------- **/
/** Dependencies                                                                                                    **/
/** --------------------------------------------------------------------------------------------------------------- **/

dependencies { /* Empty */ }

/** --------------------------------------------------------------------------------------------------------------- **/
/** Source Sets                                                                                                     **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Specifies the source sets corresponding to the production & test code.</p>
 */
sourceSets {

    /// ----------------------
    /// Production Source Sets

    main {
        java {
            srcDirs 'src/main/java/'
        }
        compileClasspath = files(['lib/asm-all-5.2.jar',
                                  'lib/ST-4.0.7.jar',
                                  'lib/jflex-1.8.2.jar',
                                  'lib/cup-11b.jar'])
        runtimeClasspath = files(['lib/jflex-1.8.2.jar',
                                  'lib/cup-11b.jar'])
    }

    /// ----------------
    /// Test Source Sets

    test {
        java {
            srcDirs 'src/test/java/'
        }
        compileClasspath = files(['lib/opentest4j-1.2.0.jar',
                                  'lib/junit-jupiter-5.8.1.jar',
                                  'lib/junit-jupiter-api-5.8.1.jar',
                                  'lib/junit-jupiter-engine-5.8.1.jar',
                                  'lib/apiguardian-api-1.1.2.jar',
                                  'lib/asm-all-5.2.jar',
                                  'lib/ST-4.0.7.jar',
                                  'lib/jflex-1.8.2.jar',
                                  'lib/cup-11b.jar',
                                  'lib/system-rules-1.19.0.jar',
                                  sourceSets.main.java.classesDirectory])
        runtimeClasspath = files([
                'lib/opentest4j-1.2.0.jar',
                'lib/junit-jupiter-5.8.1.jar',
                'lib/junit-jupiter-api-5.8.1.jar',
                'lib/junit-jupiter-engine-5.8.1.jar',
                'lib/apiguardian-api-1.1.2.jar',
                'lib/asm-all-5.2.jar',
                'lib/ST-4.0.7.jar',
                'lib/jflex-1.8.2.jar',
                'lib/cup-11b.jar',
                'lib/system-rules-1.19.0.jar',
                sourceSets.main.java.classesDirectory,
                sourceSets.test.java.classesDirectory])

    }

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Lexer Task                                                                                                      **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Generates the ProcessJ lexer with the specified .flex file.</p>
 */
tasks.register('lexer', JavaExec) {

    // Initialize the classpath, entry point, & arguments
    classpath   = sourceSets.main.runtimeClasspath
    mainClass   = 'jflex.Main'
    args        = ['-d', 'src/main/java/org/processj/compiler/phases/phase/generated/',
                   'src/main/resources/flex/ProcessJ.flex']

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Parser Task                                                                                                     **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Generates the ProcessJ parser with the specified .cup file.</p>
 */
tasks.register('parser', JavaExec) {

    // Initialize the classpath, entry point, & arguments
    classpath   = sourceSets.main.runtimeClasspath
    mainClass   = 'java_cup.Main'
    args        = ['-parser', 'Parser',
                   '-progress',
                   '-package', 'src/main/java/org/processj/compiler/phases/phase/generated/',
                   '-destdir', 'src/main/java/org/processj/compiler/phases/phase/generated/',
                   'src/main/resources/cup/ProcessJ.cup']

    dependsOn('lexer')

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Compile Task                                                                                                    **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Compiles the ProcessJ compiler.</p>
 */
compileJava {

    // Initialize the source input & classpath
    source      = sourceSets.main.java.srcDirs
    classpath   = sourceSets.main.compileClasspath

    // Specify its' dependencies
    dependsOn('parser')

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Test Compile Task                                                                                               **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Compiles the ProcessJ tests.</p>
 */
compileTestJava {

    // Initialize the source input & classpath
    source      = sourceSets.test.java.srcDirs
    classpath   = sourceSets.test.compileClasspath

    // Specify its' dependencies
    dependsOn('compileJava')

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Test Execution Task                                                                                             **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Executes the ProcessJ tests.</p>
 */
test {

    // Specify the classpath
    classpath = sourceSets.test.runtimeClasspath

    // Specify the settings
    useJUnitPlatform()
    maxHeapSize = '2G'

    testLogging {

        events "passed"

    }

    // Specify its' dependencies
    dependsOn('compileTestJava')

}

/** --------------------------------------------------------------------------------------------------------------- **/
/** Jar Build Task                                                                                                  **/
/** --------------------------------------------------------------------------------------------------------------- **/

/**
 * <p>Builds the ProcessJ .jar. Packages all pertinent dependencies along with the compiler.</p>
 */
jar {

    // Set the manifest
    manifest {

        attributes('Implementation-Title': 'ProcessJ Compiler',
                   'Implementation-Version': '0.1.0',
                   'Main-Class': 'org.processj.org.processj.ProcessJc')

    }

    // Initialize the Duplicate strategy
    duplicatesStrategy DuplicatesStrategy.WARN

    // Update the input & dependencies
    from sourceSets.main.java.classesDirectory
    dependsOn sourceSets.main.compileClasspath

    // Package all the required jars
    from {

        sourceSets.main.compileClasspath.findAll { it.name.endsWith('.jar') }.collect { zipTree(it) }

    }

    // Specify its' dependencies
    dependsOn('compileJava')

}
