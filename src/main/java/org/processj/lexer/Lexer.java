// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/resources/flex/ProcessJ.flex

package org.processj.lexer;

import org.processj.ast.*;
import org.processj.syntax.*;
import org.processj.parser.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\4\30\2\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\5\3\40\1\41\1\42\1\43"+
    "\5\11\1\44\13\11\1\45\2\11\1\46\1\47\1\50"+
    "\1\51\1\11\1\5\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\11\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\11\1\102\1\103\1\104"+
    "\1\105\6\0\1\106\32\0\2\5\4\11\4\5\1\11"+
    "\2\5\1\0\7\5\1\11\4\5\1\11\5\5\27\11"+
    "\1\5\37\11\1\5\u01ca\11\4\5\14\11\16\5\5\11"+
    "\7\5\1\11\1\5\1\11\21\5\160\0\5\11\1\5"+
    "\2\11\2\5\4\11\1\5\1\11\6\5\1\11\1\5"+
    "\3\11\1\5\1\11\1\5\24\11\1\5\123\11\1\5"+
    "\213\11\1\5\5\0\2\5\246\11\1\5\46\11\2\5"+
    "\1\11\6\5\51\11\6\5\1\11\1\5\55\0\1\5"+
    "\1\0\1\5\2\0\1\5\2\0\1\5\1\0\10\5"+
    "\33\11\4\5\4\11\15\5\6\0\5\5\1\11\4\5"+
    "\13\0\1\5\1\0\3\5\53\11\37\0\4\5\2\11"+
    "\1\0\143\11\1\5\1\11\10\0\1\5\6\0\2\11"+
    "\2\0\1\5\4\0\2\11\12\0\3\11\2\5\1\11"+
    "\17\5\1\0\1\11\1\0\36\11\33\0\2\5\131\11"+
    "\13\0\1\11\16\5\12\0\41\11\11\0\2\11\4\5"+
    "\1\11\2\5\1\0\30\11\4\0\1\11\11\0\1\11"+
    "\3\0\1\11\5\0\22\5\31\11\3\0\4\5\13\11"+
    "\5\5\30\11\1\5\6\11\1\5\2\0\6\5\10\0"+
    "\52\11\72\0\66\11\3\0\1\11\22\0\1\11\7\0"+
    "\12\11\2\0\2\5\12\0\1\5\20\11\3\0\1\5"+
    "\10\11\2\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\1\11\3\5\4\11\2\5\1\0\1\11\7\0\2\5"+
    "\2\0\2\5\3\0\1\11\10\5\1\0\4\5\2\11"+
    "\1\5\3\11\2\0\2\5\12\0\4\11\7\5\2\11"+
    "\1\5\1\0\2\5\3\0\1\5\6\11\4\5\2\11"+
    "\2\5\26\11\1\5\7\11\1\5\2\11\1\5\2\11"+
    "\1\5\2\11\2\5\1\0\1\5\5\0\4\5\2\0"+
    "\2\5\3\0\3\5\1\0\7\5\4\11\1\5\1\11"+
    "\7\5\14\0\3\11\1\0\13\5\3\0\1\5\11\11"+
    "\1\5\3\11\1\5\26\11\1\5\7\11\1\5\2\11"+
    "\1\5\5\11\2\5\1\0\1\11\10\0\1\5\3\0"+
    "\1\5\3\0\2\5\1\11\17\5\2\11\2\0\2\5"+
    "\12\0\1\5\1\11\7\5\1\11\6\0\1\5\3\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\2\11\1\5\5\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\7\5\3\0\4\5\2\11"+
    "\1\5\3\11\2\0\2\5\12\0\1\5\1\11\20\5"+
    "\1\0\1\11\1\5\6\11\3\5\3\11\1\5\4\11"+
    "\3\5\2\11\1\5\1\11\1\5\2\11\3\5\2\11"+
    "\3\5\3\11\3\5\14\11\4\5\5\0\3\5\3\0"+
    "\1\5\4\0\2\5\1\11\6\5\1\0\16\5\12\0"+
    "\11\5\1\11\6\5\5\0\10\11\1\5\3\11\1\5"+
    "\27\11\1\5\20\11\2\5\1\0\1\11\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\1\5\3\11\2\5"+
    "\1\11\2\5\2\11\2\0\2\5\12\0\20\5\1\11"+
    "\3\0\1\5\10\11\1\5\3\11\1\5\27\11\1\5"+
    "\12\11\1\5\5\11\2\5\1\0\1\11\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\6\5\2\11\1\5"+
    "\2\11\2\0\2\5\12\0\1\5\2\11\1\0\14\5"+
    "\4\0\11\11\1\5\3\11\1\5\51\11\2\0\1\11"+
    "\7\0\1\5\3\0\1\5\4\0\1\11\5\5\3\11"+
    "\1\0\7\5\3\11\2\0\2\5\12\0\12\5\6\11"+
    "\1\5\3\0\1\5\22\11\3\5\30\11\1\5\11\11"+
    "\1\5\1\11\2\5\7\11\3\5\1\0\4\5\6\0"+
    "\1\5\1\0\1\5\10\0\6\5\12\0\2\5\2\0"+
    "\15\5\60\11\1\0\2\11\7\0\4\5\10\11\10\0"+
    "\1\5\12\0\47\5\2\11\1\5\1\11\1\5\5\11"+
    "\1\5\30\11\1\5\1\11\1\5\12\11\1\0\2\11"+
    "\11\0\1\11\2\5\5\11\1\5\1\11\1\5\7\0"+
    "\1\5\12\0\2\5\4\11\40\5\1\11\27\5\2\0"+
    "\6\5\12\0\13\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\2\0\10\11\1\5\44\11\4\5\24\0\1\5"+
    "\2\0\5\11\13\0\1\5\44\0\11\5\1\0\71\5"+
    "\53\11\24\0\1\11\12\0\6\5\6\11\4\0\4\11"+
    "\3\0\1\11\3\0\2\11\7\0\3\11\4\0\15\11"+
    "\14\0\1\11\17\0\2\5\46\11\1\5\1\11\5\5"+
    "\1\11\2\5\53\11\1\5\115\11\1\5\4\11\2\5"+
    "\7\11\1\5\1\11\1\5\4\11\2\5\51\11\1\5"+
    "\4\11\2\5\41\11\1\5\4\11\2\5\7\11\1\5"+
    "\1\11\1\5\4\11\2\5\17\11\1\5\71\11\1\5"+
    "\4\11\2\5\103\11\2\5\3\0\40\5\20\11\20\5"+
    "\126\11\2\5\6\11\3\5\u016c\11\2\5\21\11\1\5"+
    "\32\11\5\5\113\11\3\5\13\11\7\5\22\11\4\0"+
    "\11\5\23\11\3\0\13\5\22\11\2\0\14\5\15\11"+
    "\1\5\3\11\1\5\2\0\14\5\64\11\40\0\3\5"+
    "\1\11\3\5\2\11\1\0\2\5\12\0\41\5\17\0"+
    "\6\5\131\11\7\5\5\11\2\0\42\11\1\0\1\11"+
    "\5\5\106\11\12\5\37\11\1\5\14\0\4\5\14\0"+
    "\12\5\12\0\36\11\2\5\5\11\13\5\54\11\4\5"+
    "\32\11\6\5\12\0\46\5\27\11\5\0\4\5\65\11"+
    "\12\0\1\5\35\0\2\5\13\0\6\5\12\0\15\5"+
    "\1\11\10\5\16\0\1\5\20\0\61\5\5\0\57\11"+
    "\21\0\10\11\3\5\12\0\21\5\11\0\14\5\3\0"+
    "\36\11\15\0\2\11\12\0\54\11\16\0\14\5\44\11"+
    "\24\0\10\5\12\0\3\5\3\11\12\0\44\11\2\5"+
    "\11\11\7\5\53\11\2\5\3\11\20\5\3\0\1\5"+
    "\25\0\4\11\1\0\6\11\1\0\2\11\3\0\1\11"+
    "\5\5\300\11\100\0\26\11\2\5\6\11\2\5\46\11"+
    "\2\5\6\11\2\5\10\11\1\5\1\11\1\5\1\11"+
    "\1\5\1\11\1\5\37\11\2\5\65\11\1\5\7\11"+
    "\1\5\1\11\3\5\3\11\1\5\7\11\3\5\4\11"+
    "\2\5\6\11\4\5\15\11\5\5\3\11\1\5\7\11"+
    "\16\5\5\0\30\5\2\3\5\0\20\5\2\11\23\5"+
    "\1\11\13\5\5\0\1\5\12\0\1\5\1\11\15\5"+
    "\1\11\20\5\15\11\3\5\41\11\17\5\15\0\4\5"+
    "\1\0\3\5\14\0\21\5\1\11\4\5\1\11\2\5"+
    "\12\11\1\5\1\11\3\5\5\11\6\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\4\11\1\5\13\11\2\5"+
    "\4\11\5\5\5\11\4\5\1\11\21\5\51\11\u0177\5"+
    "\345\11\6\5\4\11\3\0\2\11\14\5\46\11\1\5"+
    "\1\11\5\5\1\11\2\5\70\11\7\5\1\11\17\5"+
    "\1\0\27\11\11\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\40\0\57\5\1\11\325\5\3\11"+
    "\31\5\11\11\6\0\1\5\5\11\2\5\5\11\4\5"+
    "\126\11\2\5\2\0\2\5\3\11\1\5\132\11\1\5"+
    "\4\11\5\5\53\11\1\5\136\11\21\5\40\11\60\5"+
    "\320\11\100\5\215\11\103\5\56\11\2\5\15\11\3\5"+
    "\20\11\12\0\2\11\24\5\57\11\1\0\4\5\12\0"+
    "\1\5\37\11\2\0\120\11\2\0\45\5\11\11\2\5"+
    "\147\11\2\5\100\11\5\5\2\11\1\5\1\11\1\5"+
    "\5\11\30\5\20\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\5\0\4\5\1\0\13\5\1\11\7\5\64\11"+
    "\14\5\2\0\62\11\22\0\12\5\12\0\6\5\22\0"+
    "\6\11\3\5\1\11\1\5\2\11\13\0\34\11\10\0"+
    "\2\5\27\11\15\0\14\5\35\11\3\5\4\0\57\11"+
    "\16\0\16\5\1\11\12\0\6\5\5\11\1\0\12\11"+
    "\12\0\5\11\1\5\51\11\16\0\11\5\3\11\1\0"+
    "\10\11\2\0\2\5\12\0\6\5\27\11\3\5\1\11"+
    "\3\0\62\11\1\0\1\11\3\0\2\11\2\0\5\11"+
    "\2\0\1\11\1\0\1\11\30\5\3\11\2\5\13\11"+
    "\5\0\2\5\3\11\2\0\12\5\6\11\2\5\6\11"+
    "\2\5\6\11\11\5\7\11\1\5\7\11\1\5\53\11"+
    "\1\5\16\11\6\5\163\11\10\0\1\5\2\0\2\5"+
    "\12\0\6\5\244\11\14\5\27\11\4\5\61\11\4\5"+
    "\u0100\3\156\11\2\5\152\11\46\5\7\11\14\5\5\11"+
    "\5\5\1\11\1\0\12\11\1\5\15\11\1\5\5\11"+
    "\1\5\1\11\1\5\2\11\1\5\2\11\1\5\154\11"+
    "\41\5\153\11\22\5\100\11\2\5\66\11\50\5\15\11"+
    "\3\5\20\0\20\5\20\0\3\5\2\11\30\5\3\11"+
    "\31\5\1\11\6\5\5\11\1\5\207\11\2\5\1\0"+
    "\4\5\1\11\13\5\12\0\7\5\32\11\4\5\1\11"+
    "\1\5\32\11\13\5\131\11\3\5\6\11\2\5\6\11"+
    "\2\5\6\11\2\5\3\11\3\5\2\11\3\5\2\11"+
    "\22\5\3\0\4\5\14\11\1\5\32\11\1\5\23\11"+
    "\1\5\2\11\1\5\17\11\2\5\16\11\42\5\173\11"+
    "\105\5\65\11\210\5\1\0\202\5\35\11\3\5\61\11"+
    "\17\5\1\0\37\5\40\11\15\5\36\11\5\5\46\11"+
    "\5\0\5\5\36\11\2\5\44\11\4\5\10\11\1\5"+
    "\5\11\52\5\236\11\2\5\12\0\6\5\44\11\4\5"+
    "\44\11\4\5\50\11\10\5\64\11\14\5\13\11\1\5"+
    "\17\11\1\5\7\11\1\5\2\11\1\5\13\11\1\5"+
    "\17\11\1\5\7\11\1\5\2\11\103\5\67\11\11\5"+
    "\26\11\12\5\10\11\30\5\6\11\1\5\52\11\1\5"+
    "\11\11\105\5\6\11\2\5\1\11\1\5\54\11\1\5"+
    "\2\11\3\5\1\11\2\5\27\11\12\5\27\11\11\5"+
    "\37\11\101\5\23\11\1\5\2\11\12\5\26\11\12\5"+
    "\32\11\106\5\70\11\6\5\2\11\100\5\1\11\3\0"+
    "\1\5\2\0\5\5\4\0\4\11\1\5\3\11\1\5"+
    "\35\11\2\5\3\0\4\5\1\0\40\5\35\11\3\5"+
    "\35\11\43\5\10\11\1\5\34\11\2\0\31\5\66\11"+
    "\12\5\26\11\12\5\23\11\15\5\22\11\156\5\111\11"+
    "\67\5\63\11\15\5\63\11\15\5\44\11\4\0\10\5"+
    "\12\0\u0146\5\52\11\1\5\2\0\3\5\2\11\113\5"+
    "\3\0\35\11\12\5\1\11\10\5\26\11\13\0\37\5"+
    "\22\11\4\0\52\5\25\11\33\5\27\11\11\5\3\0"+
    "\65\11\17\0\37\5\13\0\2\11\2\0\1\11\11\5"+
    "\4\0\55\11\13\0\2\5\1\0\4\5\1\0\12\5"+
    "\1\0\2\5\31\11\7\5\12\0\6\5\3\0\44\11"+
    "\16\0\1\5\12\0\4\5\1\11\2\0\1\11\10\5"+
    "\43\11\1\0\2\5\1\11\11\5\3\0\60\11\16\0"+
    "\4\11\4\5\4\0\1\5\14\0\1\11\1\5\1\11"+
    "\43\5\22\11\1\5\31\11\14\0\6\5\1\0\2\11"+
    "\1\0\76\5\7\11\1\5\1\11\1\5\4\11\1\5"+
    "\17\11\1\5\12\11\7\5\57\11\14\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\11\2\5\2\11\2\5\26\11"+
    "\1\5\7\11\1\5\2\11\1\5\5\11\1\5\2\0"+
    "\1\11\7\0\2\5\2\0\2\5\3\0\2\5\1\11"+
    "\6\5\1\0\5\5\5\11\2\0\2\5\7\0\3\5"+
    "\5\0\213\5\65\11\22\0\4\11\5\5\12\0\4\5"+
    "\1\0\3\11\36\5\60\11\24\0\2\11\1\5\1\11"+
    "\10\5\12\0\246\5\57\11\7\0\2\5\11\0\27\5"+
    "\4\11\2\0\42\5\60\11\21\0\3\5\1\11\13\5"+
    "\12\0\46\5\53\11\15\0\1\11\7\5\12\0\66\5"+
    "\33\11\2\5\17\0\4\5\12\0\6\5\7\11\271\5"+
    "\54\11\17\0\145\5\100\11\12\0\25\5\10\11\2\5"+
    "\1\11\2\5\10\11\1\5\2\11\1\5\30\11\6\0"+
    "\1\5\2\0\2\5\4\0\1\11\1\0\1\11\2\0"+
    "\14\5\12\0\106\5\10\11\2\5\47\11\7\0\2\5"+
    "\7\0\1\11\1\5\1\11\1\0\33\5\1\11\12\0"+
    "\50\11\7\0\1\11\4\0\10\5\1\0\10\5\1\11"+
    "\13\0\56\11\20\0\3\5\1\11\22\5\111\11\7\5"+
    "\11\11\1\5\45\11\10\0\1\5\10\0\1\11\17\5"+
    "\12\0\30\5\36\11\2\5\26\0\1\5\16\0\111\5"+
    "\7\11\1\5\2\11\1\5\46\11\6\0\3\5\1\0"+
    "\1\5\2\0\1\5\7\0\1\11\1\0\10\5\12\0"+
    "\6\5\6\11\1\5\2\11\1\5\40\11\5\0\1\5"+
    "\2\0\1\5\5\0\1\11\7\5\12\0\u0136\5\23\11"+
    "\4\0\11\5\2\0\1\11\1\0\15\11\1\5\42\11"+
    "\7\0\3\5\5\0\15\5\12\0\126\5\1\11\54\5"+
    "\4\11\37\5\232\11\146\5\157\11\21\5\304\11\u014c\5"+
    "\141\11\17\5\60\11\21\0\6\11\17\0\252\5\107\11"+
    "\271\5\71\11\7\5\37\11\1\5\12\0\6\5\117\11"+
    "\1\5\12\0\6\5\36\11\2\5\5\0\13\5\60\11"+
    "\7\0\11\5\4\11\14\5\12\0\11\5\25\11\5\5"+
    "\23\11\260\5\100\11\200\5\113\11\4\5\1\0\1\11"+
    "\67\0\7\5\4\0\15\11\100\5\2\11\1\5\1\11"+
    "\1\0\13\5\2\0\16\5\370\11\10\5\326\11\52\5"+
    "\11\11\u01e7\5\4\11\1\5\7\11\1\5\2\11\1\5"+
    "\43\11\17\5\1\11\35\5\3\11\2\5\1\11\16\5"+
    "\4\11\10\5\u018c\11\4\5\153\11\5\5\15\11\3\5"+
    "\11\11\7\5\12\11\3\5\2\0\1\5\4\0\134\5"+
    "\56\0\2\5\27\0\u011e\5\5\0\3\5\26\0\2\5"+
    "\7\0\36\5\4\0\224\5\3\0\273\5\125\11\1\5"+
    "\107\11\1\5\2\11\2\5\1\11\2\5\2\11\2\5"+
    "\4\11\1\5\14\11\1\5\1\11\1\5\7\11\1\5"+
    "\101\11\1\5\4\11\2\5\10\11\1\5\7\11\1\5"+
    "\34\11\1\5\4\11\1\5\5\11\1\5\1\11\3\5"+
    "\7\11\1\5\u0154\11\2\5\31\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\10\11\2\5\151\0\4\5\62\0\10\5\1\0\16\5"+
    "\1\0\26\5\5\0\1\5\17\0\120\5\37\11\6\5"+
    "\6\11\325\5\7\0\1\5\21\0\2\5\7\0\1\5"+
    "\2\0\1\5\5\0\5\5\76\11\41\5\1\0\160\5"+
    "\55\11\3\5\7\0\7\11\2\5\12\0\4\5\1\11"+
    "\u0141\5\36\11\1\0\21\5\54\11\16\0\5\5\1\11"+
    "\320\5\34\11\16\0\346\5\7\11\1\5\4\11\1\5"+
    "\2\11\1\5\17\11\1\5\305\11\13\5\7\0\51\5"+
    "\104\11\7\0\1\11\4\5\12\0\u0156\5\1\11\117\5"+
    "\4\11\1\5\33\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\12\11\1\5\4\11\1\5\1\11\1\5"+
    "\1\11\6\5\1\11\4\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\3\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\2\11\1\5\1\11\2\5\4\11\1\5"+
    "\7\11\1\5\4\11\1\5\4\11\1\5\1\11\1\5"+
    "\12\11\1\5\21\11\5\5\3\11\1\5\5\11\1\5"+
    "\21\11\u0134\5\12\0\6\5\340\11\40\5\72\11\6\5"+
    "\336\11\2\5\u0182\11\16\5\u0131\11\37\5\36\11\342\5"+
    "\113\11\5\5\u0160\11\121\5\1\0\36\5\140\0\200\5"+
    "\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\20\4\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\2\36\1\37\1\0\1\40\1\41\1\42"+
    "\1\0\2\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\0\1\52\1\53\4\17\2\51\1\0\1\54"+
    "\1\55\1\0\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\12\4\1\65\6\4\1\66\2\4\1\67\26\4"+
    "\1\70\1\71\1\0\1\72\3\0\1\73\1\0\2\52"+
    "\2\17\1\0\1\51\2\17\1\74\1\75\1\76\1\77"+
    "\17\4\1\100\1\4\1\101\3\4\1\102\2\4\1\103"+
    "\1\104\6\4\1\105\16\4\2\0\1\73\1\0\3\17"+
    "\1\106\3\4\1\107\1\110\1\111\1\112\5\4\1\113"+
    "\3\4\1\114\2\4\1\115\2\4\1\116\2\4\1\117"+
    "\2\4\1\120\5\4\1\121\1\122\3\4\1\123\1\4"+
    "\1\124\1\125\1\4\1\126\1\4\2\0\3\17\2\4"+
    "\1\127\1\130\1\131\6\4\1\132\15\4\1\133\4\4"+
    "\1\134\1\135\1\136\2\0\3\17\4\4\1\137\1\140"+
    "\1\4\1\141\1\4\1\142\1\143\1\144\4\4\1\145"+
    "\1\146\1\147\1\150\1\151\1\152\1\4\1\153\1\4"+
    "\1\154\3\17\1\155\1\156\1\4\1\157\1\160\1\4"+
    "\1\161\1\162\2\4\1\163\1\164\3\17\1\165\2\4"+
    "\1\166\3\17\1\4\1\167\3\17\1\170\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\1\17\1\51\1\0\1\51\1\0\4\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\107\0\107\0\u02c6\0\u030d\0\107"+
    "\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\107\0\u04fe"+
    "\0\u0545\0\u058c\0\107\0\107\0\107\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\107\0\u0a8a"+
    "\0\107\0\107\0\107\0\u011c\0\107\0\u0ad1\0\107\0\u0b18"+
    "\0\107\0\107\0\107\0\u0b5f\0\107\0\u0ba6\0\u0bed\0\107"+
    "\0\107\0\107\0\107\0\107\0\u0c34\0\u0c7b\0\u0cc2\0\107"+
    "\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\107\0\u0e6c\0\107"+
    "\0\107\0\u0eb3\0\107\0\u0efa\0\107\0\107\0\107\0\u0f41"+
    "\0\107\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u01aa\0\u143f\0\u1486\0\u01aa\0\u14cd\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\107\0\107\0\u1ae7\0\107"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\107\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\107\0\107\0\u1e82"+
    "\0\u01aa\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073"+
    "\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u01aa\0\u2380\0\u23c7\0\u240e\0\u01aa\0\u2455"+
    "\0\u249c\0\u01aa\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u01aa\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\107"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u2d7c"+
    "\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u01aa\0\u2edf\0\u2f26\0\u2f6d"+
    "\0\u01aa\0\u2fb4\0\u2ffb\0\u01aa\0\u3042\0\u3089\0\u01aa\0\u30d0"+
    "\0\u3117\0\u01aa\0\u315e\0\u31a5\0\u01aa\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u01aa\0\u01aa\0\u334f\0\u3396\0\u33dd\0\u01aa"+
    "\0\u3424\0\u01aa\0\u01aa\0\u346b\0\u01aa\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u01aa\0\u01aa\0\u01aa"+
    "\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u01aa\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u01aa\0\u3c2f\0\u3c76\0\u3cbd"+
    "\0\u3d04\0\u01aa\0\u01aa\0\u01aa\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u01aa\0\u01aa\0\u3fca"+
    "\0\u01aa\0\u4011\0\u01aa\0\u01aa\0\u01aa\0\u4058\0\u409f\0\u40e6"+
    "\0\u412d\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u4174"+
    "\0\u01aa\0\u41bb\0\107\0\u4202\0\u4249\0\u4290\0\u01aa\0\u01aa"+
    "\0\u42d7\0\u01aa\0\u01aa\0\u431e\0\u01aa\0\u01aa\0\u4365\0\u43ac"+
    "\0\u01aa\0\u01aa\0\u43f3\0\u443a\0\u4481\0\u01aa\0\u44c8\0\u450f"+
    "\0\u01aa\0\u4556\0\u459d\0\u45e4\0\u462b\0\u01aa\0\u4672\0\u46b9"+
    "\0\u4700\0\u01aa\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2"+
    "\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c45\0\u4c8c\0\u4cd3"+
    "\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\4\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\6\10\1\34\1\2\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\10"+
    "\1\45\1\10\1\46\1\47\1\50\1\10\1\51\1\10"+
    "\1\52\1\53\1\54\1\10\1\55\1\56\2\10\1\57"+
    "\1\60\1\61\1\62\112\0\1\3\141\0\1\63\51\0"+
    "\2\64\1\65\1\64\1\66\2\64\1\67\37\64\1\0"+
    "\37\64\70\0\1\70\16\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\30\10\4\0\1\10\35\0"+
    "\1\71\64\0\1\72\21\0\1\73\51\0\2\74\1\75"+
    "\1\74\1\76\7\74\1\0\32\74\1\77\37\74\35\0"+
    "\1\100\71\0\1\101\14\0\1\102\73\0\1\103\12\0"+
    "\1\104\76\0\5\105\74\0\1\106\4\0\1\107\10\0"+
    "\1\110\74\0\1\105\1\0\1\111\1\112\1\113\1\114"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\1\122\7\0"+
    "\1\116\1\117\1\120\4\0\1\121\13\0\1\122\31\0"+
    "\1\105\1\0\5\25\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\54\0\1\123"+
    "\110\0\1\124\1\125\106\0\1\126\106\0\1\127\1\130"+
    "\105\0\1\131\51\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\132\15\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\133"+
    "\14\10\1\134\2\10\1\135\6\10\1\136\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\137"+
    "\6\10\1\140\2\10\1\141\2\10\1\142\12\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\143\10\10\1\144\12\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\145"+
    "\1\10\1\146\11\10\1\147\1\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\150\11\10"+
    "\1\151\2\10\1\152\12\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\5\10\1\153\5\10"+
    "\1\154\1\155\4\10\1\156\6\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\15\10\1\157"+
    "\12\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\15\10\1\160\12\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\161\3\10"+
    "\1\162\16\10\1\163\4\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\1\164\17\10\1\165"+
    "\2\10\1\166\4\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\167\23\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\170\2\10\1\171\1\10\1\172\10\10\1\173"+
    "\1\174\1\10\1\175\1\10\1\176\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\10\10\1\177"+
    "\7\10\1\200\7\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\15\10\1\201\12\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\7\10\1\202\1\203\7\10\1\204\7\10\4\0\1\10"+
    "\35\0\1\205\45\0\1\206\5\0\1\65\176\0\1\207"+
    "\16\0\1\75\1\0\1\76\7\0\1\210\74\0\1\75"+
    "\113\0\1\74\4\0\1\74\10\0\3\211\1\212\16\0"+
    "\1\74\3\0\1\74\3\0\1\74\6\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\213\36\0\5\105\7\0\1\116"+
    "\1\117\1\120\11\0\1\116\1\117\1\120\27\0\17\214"+
    "\1\215\67\214\2\107\1\216\1\107\1\217\102\107\23\0"+
    "\1\105\1\0\1\111\1\112\1\113\1\114\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\45\0\1\105\1\0\4\114\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\45\0\1\105\1\0\4\220\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\45\0\1\105\1\0\4\221\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\45\0\1\105\1\0\5\115\7\0\1\116"+
    "\1\117\1\120\11\0\1\116\1\117\1\120\47\0\1\222"+
    "\1\0\1\222\2\0\5\223\102\0\1\224\4\225\6\0"+
    "\4\225\6\0\6\225\64\0\1\226\106\0\1\227\1\230"+
    "\50\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\22\10\1\231\5\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\20\10\1\232\7\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\15\10\1\233\12\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\234\23\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\22\10\1\235\5\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\21\10\1\236\6\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\237\27\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\240\27\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\14\10"+
    "\1\241\13\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\5\10\1\242\22\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\23\10"+
    "\1\243\4\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\21\10\1\244\6\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\20\10"+
    "\1\245\7\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\246\5\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\12\10"+
    "\1\247\15\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\15\10\1\250\12\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\20\10"+
    "\1\251\7\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\16\10\1\252\11\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\22\10"+
    "\1\253\5\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\14\10\1\254\13\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\10"+
    "\1\255\26\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\256\5\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\25\10"+
    "\1\257\2\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\260\15\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\2\10"+
    "\1\261\15\10\1\262\7\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\10\10\1\263\4\10"+
    "\1\264\12\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\10\1\265\26\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\266"+
    "\1\10\1\267\16\10\1\270\1\271\5\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\17\10"+
    "\1\272\10\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\273\14\10\1\274\12\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\10\10\1\275\17\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\15\10\1\276\2\10\1\277"+
    "\7\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\21\10\1\300\6\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\10\10\1\301"+
    "\17\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\302\13\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\13\10\1\303"+
    "\14\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\23\10\1\304\4\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\10\10\1\305"+
    "\17\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\306\17\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\22\10\1\307"+
    "\5\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\310\17\10\4\0\1\10\52\0"+
    "\1\311\36\0\1\75\1\0\1\76\7\0\1\210\10\0"+
    "\4\212\60\0\1\75\1\0\1\76\7\0\1\210\10\0"+
    "\4\74\103\0\5\312\6\0\4\312\6\0\6\312\27\0"+
    "\17\214\1\313\67\214\17\215\1\314\67\215\2\0\1\216"+
    "\127\0\1\105\1\0\4\315\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\45\0\1\105\1\0\4\316\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\47\0\5\223\102\0\5\223\7\0\1\116\1\0\1\120"+
    "\11\0\1\116\1\0\1\120\54\0\1\224\4\225\6\0"+
    "\4\225\1\121\5\0\6\225\4\0\1\121\47\0\5\317"+
    "\6\0\4\317\1\121\5\0\6\317\4\0\1\121\57\0"+
    "\1\320\51\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\20\10\1\321\7\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\322"+
    "\15\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\1\323\27\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\324\23\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\325\23\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\14\10\1\326\3\10"+
    "\1\327\7\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\10\10\1\330\17\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\21\10"+
    "\1\331\1\332\5\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\333\27\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\10"+
    "\1\334\26\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\4\10\1\335\23\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\15\10"+
    "\1\336\12\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\4\10\1\337\23\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\21\10"+
    "\1\304\6\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\340\27\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\11\10\1\341"+
    "\16\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\12\10\1\342\2\10\1\343\12\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\6\10\1\344\21\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\345\17\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\10\10\1\346\17\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\12\10\1\347\15\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\11\10\1\350\16\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\24\10\1\351\3\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\2\10\1\352\17\10\1\353\5\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\354"+
    "\15\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\3\10\1\355\24\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\15\10\1\356"+
    "\12\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\23\10\1\357\4\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\23\10\1\360"+
    "\4\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\20\10\1\361\7\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\362"+
    "\7\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\16\10\1\363\11\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\16\10\1\364"+
    "\11\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\365\17\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\16\10\1\366"+
    "\11\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\367\5\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\2\10\1\370"+
    "\25\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\371\23\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\372"+
    "\23\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\3\10\1\373\24\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\374"+
    "\15\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\7\10\1\375\20\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\22\10\1\376"+
    "\5\10\4\0\1\10\60\0\1\377\53\0\5\u0100\6\0"+
    "\4\u0100\6\0\6\u0100\27\0\17\214\1\313\4\214\1\216"+
    "\62\214\17\215\1\314\4\215\1\216\62\215\23\0\1\105"+
    "\1\0\4\u0101\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\45\0\1\105"+
    "\1\0\4\u0102\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\47\0\5\u0103"+
    "\6\0\4\u0103\1\121\5\0\6\u0103\4\0\1\121\22\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\10\10\1\u0104\17\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0105\23\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\11\10\1\u0106\16\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\13\10\1\u0107\14\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\u0108\5\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\u0109\17\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\23\10\1\u010a\4\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\12\10\1\u010b\15\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\u010c\15\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\14\10\1\u010d\3\10\1\u010e"+
    "\7\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\u010f\5\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u0110"+
    "\23\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\20\10\1\u0111\7\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\u0112"+
    "\15\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\24\10\1\u0113\3\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\u0114\27\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\u0115\27\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0116\10\10\1\u0117"+
    "\12\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\u0118\17\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\u0119"+
    "\7\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\13\10\1\u011a\14\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\u011b"+
    "\7\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\u011c\23\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\22\10\1\u011d"+
    "\5\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\u011e\13\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u011f"+
    "\23\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\2\10\1\u0120\25\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\15\10\1\u0121"+
    "\2\10\1\u0122\7\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0123\23\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u0124\23\10\4\0\1\10\65\0\1\u0125\46\0"+
    "\5\u0126\6\0\4\u0126\6\0\6\u0126\52\0\1\105\1\0"+
    "\4\u0127\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\45\0\1\105\1\0"+
    "\4\u0128\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\47\0\5\u0129\6\0"+
    "\4\u0129\1\121\5\0\6\u0129\4\0\1\121\22\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u012a\23\10\4\0\2\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\u012b\27\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\14\10\1\u012c"+
    "\13\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\12\10\1\u012d\15\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u012e"+
    "\23\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\12\10\1\u012f\15\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\3\10\1\u0130"+
    "\24\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\u0131\13\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\13\10\1\u0132"+
    "\14\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\u0133\5\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u0134"+
    "\23\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\u0135\23\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\6\10\1\u0136"+
    "\21\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\u0137\5\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\2\10\1\u0138"+
    "\25\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\2\10\1\u0139\25\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\2\10\1\u013a"+
    "\25\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\3\10\1\u013b\24\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u013c"+
    "\23\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\u013d\13\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\3\10\1\u013e"+
    "\24\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\6\10\1\u013f\21\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\14\10\1\u0140"+
    "\13\10\4\0\2\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\7\10\1\u0141\20\10\4\0\2\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\23\10\1\u0142"+
    "\4\10\4\0\1\10\52\0\1\u0143\61\0\5\74\6\0"+
    "\4\74\6\0\6\74\52\0\1\105\1\0\4\u0144\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\45\0\1\105\1\0\4\u0145\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\47\0\5\u0146\6\0\4\u0146\1\121"+
    "\5\0\6\u0146\4\0\1\121\22\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\20\10\1\u0147\7\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\14\10\1\u0148\13\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\23\10\1\u0149\4\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\22\10\1\u014a\5\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\21\10\1\u014b\6\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\u014c\23\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u014d\23\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\u014e\23\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\u014f\5\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\15\10\1\u0150\12\10\4\0\2\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\3\10\1\u0151\24\10"+
    "\4\0\2\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\22\10\1\u0152\5\10\4\0\1\10\23\0\1\105"+
    "\1\0\4\u0153\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\45\0\1\105"+
    "\1\0\4\u0154\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\47\0\5\u0155"+
    "\6\0\4\u0155\1\121\5\0\6\u0155\4\0\1\121\22\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u0156\23\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\14\10\1\u0157\13\10\4\0"+
    "\2\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u0158\23\10\4\0\2\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\12\10\1\u0159\15\10\4\0"+
    "\1\10\23\0\1\105\1\0\4\u015a\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\45\0\1\105\1\0\4\u015b\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\47\0\5\u015c\6\0\4\u015c\1\121\5\0\6\u015c"+
    "\4\0\1\121\22\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\u015d\5\10\4\0\2\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\3\10"+
    "\1\u015e\24\10\4\0\1\10\23\0\1\105\1\0\4\u015f"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\45\0\1\105\1\0\4\u0160"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\47\0\5\u0161\6\0\4\u0161"+
    "\1\121\5\0\6\u0161\4\0\1\121\22\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\21\10\1\u0162"+
    "\6\10\4\0\1\10\23\0\1\105\1\0\4\u0163\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\45\0\1\105\1\0\4\u0164\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\47\0\5\u0165\6\0\4\u0165\1\121"+
    "\5\0\6\u0165\4\0\1\121\45\0\1\105\1\0\4\u0166"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\45\0\1\105\1\0\4\u0167"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\47\0\5\u0168\6\0\4\u0168"+
    "\1\121\5\0\6\u0168\4\0\1\121\45\0\1\105\1\0"+
    "\4\u0169\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\45\0\1\105\1\0"+
    "\4\u016a\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\47\0\5\u016b\6\0"+
    "\4\u016b\1\121\5\0\6\u016b\4\0\1\121\45\0\1\105"+
    "\1\0\4\u016c\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\45\0\1\105"+
    "\1\0\4\u016d\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\47\0\5\u016e"+
    "\6\0\4\u016e\1\121\5\0\6\u016e\4\0\1\121\45\0"+
    "\1\105\1\0\4\u016f\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\45\0"+
    "\1\105\1\0\4\u0170\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\47\0"+
    "\5\u0171\6\0\4\u0171\1\121\5\0\6\u0171\4\0\1\121"+
    "\45\0\1\105\1\0\4\u0172\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\45\0\1\105\1\0\4\u0173\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\47\0\5\u0174\6\0\4\u0174\1\121\5\0\6\u0174\4\0"+
    "\1\121\45\0\1\105\1\0\4\u0175\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\45\0\1\105\1\0\4\u0176\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\47\0\5\u0177\6\0\4\u0177\1\121\5\0\6\u0177"+
    "\4\0\1\121\45\0\1\105\1\0\4\u0178\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\47\0\5\u0179\6\0\4\u0179\1\121\5\0"+
    "\6\u0179\4\0\1\121\45\0\1\105\1\0\4\u017a\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\66\0\1\121\17\0\1\121\45\0"+
    "\1\105\1\0\4\u017b\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\45\0"+
    "\1\105\1\0\4\u017c\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\45\0"+
    "\1\105\1\0\4\u017d\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\45\0"+
    "\1\105\1\0\5\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20093];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\3\11\21\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\1\1\11\1\0\3\11\1\0\1\11\1\1\1\0"+
    "\5\11\1\1\1\0\1\1\1\11\5\1\1\11\1\0"+
    "\2\11\1\0\1\11\1\1\3\11\1\1\1\11\53\1"+
    "\2\11\1\0\1\11\3\0\1\1\1\0\1\11\3\1"+
    "\1\0\3\1\2\11\61\1\2\0\1\1\1\0\3\1"+
    "\1\11\56\1\2\0\44\1\2\0\34\1\1\11\41\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /// --------------------
    /// Public Static Fields

    public static boolean   Debug       = false ;
    public static String    CurrentLine = ""    ;
    public static int       LineCount   = 0     ;
    public static int       Spaces      = 0     ;

    /// --------------
    /// Public Methods

    public void addToLine(String string, int line) {

        CurrentLine = (line != LineCount) ? string : CurrentLine + string;

        LineCount = line;

    }

    public void addLineComment() {

        final String line = "Comment, line " + (yyline + 1) + " [" + (yycolumn + 1 + Spaces) + ":" + (yycolumn + yylength()) + "]";

        final Token token = (yytext().startsWith("/*"))
            ? new Token(Types.INSTANCE.MULTILINE_COMMENT,
                "Multi-line " + line, yyline + 1, yycolumn + 1, yycolumn + yylength())
            : new Token(Types.INSTANCE.SINGLELINE_COMMENT,
                "Single-line " + line, yyline + 1, yycolumn + 1, yycolumn + yylength());

    }

    public void countSpaces(int line) {

        Spaces = line;

    }

    private java_cup.runtime.Symbol token(int kind) {

        this.addToLine(yytext(), yyline+1);

        final Token token = new Token(kind, yytext(), yyline + 1, yycolumn + 1, yycolumn + yylength());

        if(Debug) System.out.println(token);

        return new java_cup.runtime.Symbol(kind, token);

    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 121: break;
          case 2:
            { addToLine(yytext(), yyline+1); countSpaces(yycolumn+1);
	//if (yytext().equals("\t")) yycolumn += 6; System.out.println(":::'" + yytext()+"'");
            }
            // fall through
          case 122: break;
          case 3:
            { return token(sym.NOT);
            }
            // fall through
          case 123: break;
          case 4:
            { return token(sym.IDENTIFIER);
            }
            // fall through
          case 124: break;
          case 5:
            { return token(sym.MOD);
            }
            // fall through
          case 125: break;
          case 6:
            { return token(sym.AND);
            }
            // fall through
          case 126: break;
          case 7:
            { return token(sym.LPAREN);
            }
            // fall through
          case 127: break;
          case 8:
            { return token(sym.RPAREN);
            }
            // fall through
          case 128: break;
          case 9:
            { return token(sym.MULT);
            }
            // fall through
          case 129: break;
          case 10:
            { return token(sym.PLUS);
            }
            // fall through
          case 130: break;
          case 11:
            { return token(sym.COMMA);
            }
            // fall through
          case 131: break;
          case 12:
            { return token(sym.MINUS);
            }
            // fall through
          case 132: break;
          case 13:
            { return token(sym.DOT);
            }
            // fall through
          case 133: break;
          case 14:
            { return token(sym.DIV);
            }
            // fall through
          case 134: break;
          case 15:
            { return token(sym.INTEGER_LITERAL);
            }
            // fall through
          case 135: break;
          case 16:
            { return token(sym.COLON);
            }
            // fall through
          case 136: break;
          case 17:
            { return token(sym.SEMICOLON);
            }
            // fall through
          case 137: break;
          case 18:
            { return token(sym.LT);
            }
            // fall through
          case 138: break;
          case 19:
            { return token(sym.EQ);
            }
            // fall through
          case 139: break;
          case 20:
            { return token(sym.GT);
            }
            // fall through
          case 140: break;
          case 21:
            { return token(sym.QUEST);
            }
            // fall through
          case 141: break;
          case 22:
            { return token(sym.LBRACK);
            }
            // fall through
          case 142: break;
          case 23:
            { return token(sym.RBRACK);
            }
            // fall through
          case 143: break;
          case 24:
            { return token(sym.XOR);
            }
            // fall through
          case 144: break;
          case 25:
            { return token(sym.LBRACE);
            }
            // fall through
          case 145: break;
          case 26:
            { return token(sym.OR);
            }
            // fall through
          case 146: break;
          case 27:
            { return token(sym.RBRACE);
            }
            // fall through
          case 147: break;
          case 28:
            { return token(sym.COMP);
            }
            // fall through
          case 148: break;
          case 29:
            { return token(sym.NOTEQ);
            }
            // fall through
          case 149: break;
          case 30:
            { throw new RuntimeException("Unterminated string at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 150: break;
          case 31:
            { return token(sym.STRING_LITERAL);
            }
            // fall through
          case 151: break;
          case 32:
            { return token(sym.MODEQ);
            }
            // fall through
          case 152: break;
          case 33:
            { return token(sym.ANDAND);
            }
            // fall through
          case 153: break;
          case 34:
            { return token(sym.ANDEQ);
            }
            // fall through
          case 154: break;
          case 35:
            { throw new RuntimeException("Unterminated character at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 155: break;
          case 36:
            { return token(sym.MULTEQ);
            }
            // fall through
          case 156: break;
          case 37:
            { return token(sym.PLUSPLUS);
            }
            // fall through
          case 157: break;
          case 38:
            { return token(sym.PLUSEQ);
            }
            // fall through
          case 158: break;
          case 39:
            { return token(sym.MINUSMINUS);
            }
            // fall through
          case 159: break;
          case 40:
            { return token(sym.MINUSEQ);
            }
            // fall through
          case 160: break;
          case 41:
            { return token(sym.DOUBLE_LITERAL);
            }
            // fall through
          case 161: break;
          case 42:
            { addToLine(yytext(), yyline+1); addLineComment();
            }
            // fall through
          case 162: break;
          case 43:
            { return token(sym.DIVEQ);
            }
            // fall through
          case 163: break;
          case 44:
            { return token(sym.FLOAT_LITERAL);
            }
            // fall through
          case 164: break;
          case 45:
            { return token(sym.LONG_LITERAL);
            }
            // fall through
          case 165: break;
          case 46:
            { return token(sym.COLONCOLON);
            }
            // fall through
          case 166: break;
          case 47:
            { return token(sym.LSHIFT);
            }
            // fall through
          case 167: break;
          case 48:
            { return token(sym.LTEQ);
            }
            // fall through
          case 168: break;
          case 49:
            { return token(sym.EQEQ);
            }
            // fall through
          case 169: break;
          case 50:
            { return token(sym.GTEQ);
            }
            // fall through
          case 170: break;
          case 51:
            { return token(sym.RSHIFT);
            }
            // fall through
          case 171: break;
          case 52:
            { return token(sym.XOREQ);
            }
            // fall through
          case 172: break;
          case 53:
            { return token(sym.DO);
            }
            // fall through
          case 173: break;
          case 54:
            { return token(sym.IF);
            }
            // fall through
          case 174: break;
          case 55:
            { return token(sym.IS);
            }
            // fall through
          case 175: break;
          case 56:
            { return token(sym.OREQ);
            }
            // fall through
          case 176: break;
          case 57:
            { return token(sym.OROR);
            }
            // fall through
          case 177: break;
          case 58:
            { return token(sym.CHARACTER_LITERAL);
            }
            // fall through
          case 178: break;
          case 59:
            { throw new RuntimeException("Unterminated comment at EOF at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 179: break;
          case 60:
            { return token(sym.LSHIFTEQ);
            }
            // fall through
          case 180: break;
          case 61:
            { return token(sym.RSHIFTEQ);
            }
            // fall through
          case 181: break;
          case 62:
            { return token(sym.RRSHIFT);
            }
            // fall through
          case 182: break;
          case 63:
            { return token(sym.ALT);
            }
            // fall through
          case 183: break;
          case 64:
            { return token(sym.FOR);
            }
            // fall through
          case 184: break;
          case 65:
            { return token(sym.INT);
            }
            // fall through
          case 185: break;
          case 66:
            { return token(sym.NEW);
            }
            // fall through
          case 186: break;
          case 67:
            { return token(sym.PAR);
            }
            // fall through
          case 187: break;
          case 68:
            { return token(sym.PRI);
            }
            // fall through
          case 188: break;
          case 69:
            { return token(sym.SEQ);
            }
            // fall through
          case 189: break;
          case 70:
            { return token(sym.RRSHIFTEQ);
            }
            // fall through
          case 190: break;
          case 71:
            { return token(sym.BYTE);
            }
            // fall through
          case 191: break;
          case 72:
            { return token(sym.CASE);
            }
            // fall through
          case 192: break;
          case 73:
            { return token(sym.CHAN);
            }
            // fall through
          case 193: break;
          case 74:
            { return token(sym.CHAR);
            }
            // fall through
          case 194: break;
          case 75:
            { return token(sym.ELSE);
            }
            // fall through
          case 195: break;
          case 76:
            { return token(sym.FORK);
            }
            // fall through
          case 196: break;
          case 77:
            { return token(sym.LONG);
            }
            // fall through
          case 197: break;
          case 78:
            { return token(sym.NULL_LITERAL);
            }
            // fall through
          case 198: break;
          case 79:
            { return token(sym.PROC);
            }
            // fall through
          case 199: break;
          case 80:
            { return token(sym.READ);
            }
            // fall through
          case 200: break;
          case 81:
            { return token(sym.SKIP);
            }
            // fall through
          case 201: break;
          case 82:
            { return token(sym.STOP);
            }
            // fall through
          case 202: break;
          case 83:
            { return token(sym.SYNC);
            }
            // fall through
          case 203: break;
          case 84:
            { return token(sym.BOOLEAN_LITERAL);
            }
            // fall through
          case 204: break;
          case 85:
            { return token(sym.VOID);
            }
            // fall through
          case 205: break;
          case 86:
            { return token(sym.WITH);
            }
            // fall through
          case 206: break;
          case 87:
            { return token(sym.BREAK);
            }
            // fall through
          case 207: break;
          case 88:
            { return token(sym.CLAIM);
            }
            // fall through
          case 208: break;
          case 89:
            { return token(sym.CONST);
            }
            // fall through
          case 209: break;
          case 90:
            { return token(sym.FLOAT);
            }
            // fall through
          case 210: break;
          case 91:
            { return token(sym.SHORT);
            }
            // fall through
          case 211: break;
          case 92:
            { return token(sym.TIMER);
            }
            // fall through
          case 212: break;
          case 93:
            { return token(sym.WHILE);
            }
            // fall through
          case 213: break;
          case 94:
            { return token(sym.WRITE);
            }
            // fall through
          case 214: break;
          case 95:
            { return token(sym.DOUBLE);
            }
            // fall through
          case 215: break;
          case 96:
            { return token(sym.ENROLL);
            }
            // fall through
          case 216: break;
          case 97:
            { return token(sym.EXTERN);
            }
            // fall through
          case 217: break;
          case 98:
            { return token(sym.IMPORT);
            }
            // fall through
          case 218: break;
          case 99:
            { return token(sym.MOBILE);
            }
            // fall through
          case 219: break;
          case 100:
            { return token(sym.NATIVE);
            }
            // fall through
          case 220: break;
          case 101:
            { return token(sym.PUBLIC);
            }
            // fall through
          case 221: break;
          case 102:
            { return token(sym.RECORD);
            }
            // fall through
          case 222: break;
          case 103:
            { return token(sym.RESUME);
            }
            // fall through
          case 223: break;
          case 104:
            { return token(sym.RETURN);
            }
            // fall through
          case 224: break;
          case 105:
            { return token(sym.SHARED);
            }
            // fall through
          case 225: break;
          case 106:
            { return token(sym.STRING);
            }
            // fall through
          case 226: break;
          case 107:
            { return token(sym.SWITCH);
            }
            // fall through
          case 227: break;
          case 108:
            { return token(sym.PRAGMA);
            }
            // fall through
          case 228: break;
          case 109:
            { return token(sym.BARRIER);
            }
            // fall through
          case 229: break;
          case 110:
            { return token(sym.BOOLEAN);
            }
            // fall through
          case 230: break;
          case 111:
            { return token(sym.DEFAULT);
            }
            // fall through
          case 231: break;
          case 112:
            { return token(sym.EXTENDS);
            }
            // fall through
          case 232: break;
          case 113:
            { return token(sym.PACKAGE);
            }
            // fall through
          case 233: break;
          case 114:
            { return token(sym.PRIVATE);
            }
            // fall through
          case 234: break;
          case 115:
            { return token(sym.SUSPEND);
            }
            // fall through
          case 235: break;
          case 116:
            { return token(sym.TIMEOUT);
            }
            // fall through
          case 236: break;
          case 117:
            { return token(sym.CONTINUE);
            }
            // fall through
          case 237: break;
          case 118:
            { return token(sym.PROTOCOL);
            }
            // fall through
          case 238: break;
          case 119:
            { return token(sym.PROTECTED);
            }
            // fall through
          case 239: break;
          case 120:
            { return token(sym.IMPLEMENTS);
            }
            // fall through
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
