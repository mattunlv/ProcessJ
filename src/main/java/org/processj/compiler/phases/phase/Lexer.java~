// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/resources/flex/ProcessJ.flex

package org.processj.compiler.phases.phase;

import org.processj.compiler.ast.Token;
import org.processj.compiler.utilities.syntax.Types;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\26\4\27\2\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\3\3\37\1\40\1\41\1\42"+
    "\5\10\1\43\13\10\1\44\2\10\1\45\1\46\1\47"+
    "\1\50\1\10\1\3\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\10\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\10\1\101\1\102\1\103"+
    "\1\104\41\0\2\3\4\10\4\3\1\10\2\3\1\0"+
    "\7\3\1\10\4\3\1\10\5\3\27\10\1\3\37\10"+
    "\1\3\u01ca\10\4\3\14\10\16\3\5\10\7\3\1\10"+
    "\1\3\1\10\21\3\160\0\5\10\1\3\2\10\2\3"+
    "\4\10\1\3\1\10\6\3\1\10\1\3\3\10\1\3"+
    "\1\10\1\3\24\10\1\3\123\10\1\3\213\10\1\3"+
    "\5\0\2\3\246\10\1\3\46\10\2\3\1\10\6\3"+
    "\51\10\6\3\1\10\1\3\55\0\1\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\3\1\0\10\3\33\10\4\3"+
    "\4\10\15\3\6\0\5\3\1\10\4\3\13\0\1\3"+
    "\1\0\3\3\53\10\37\0\4\3\2\10\1\0\143\10"+
    "\1\3\1\10\10\0\1\3\6\0\2\10\2\0\1\3"+
    "\4\0\2\10\12\0\3\10\2\3\1\10\17\3\1\0"+
    "\1\10\1\0\36\10\33\0\2\3\131\10\13\0\1\10"+
    "\16\3\12\0\41\10\11\0\2\10\4\3\1\10\2\3"+
    "\1\0\30\10\4\0\1\10\11\0\1\10\3\0\1\10"+
    "\5\0\22\3\31\10\3\0\4\3\13\10\5\3\30\10"+
    "\1\3\6\10\1\3\2\0\6\3\10\0\52\10\72\0"+
    "\66\10\3\0\1\10\22\0\1\10\7\0\12\10\2\0"+
    "\2\3\12\0\1\3\20\10\3\0\1\3\10\10\2\3"+
    "\2\10\2\3\26\10\1\3\7\10\1\3\1\10\3\3"+
    "\4\10\2\3\1\0\1\10\7\0\2\3\2\0\2\3"+
    "\3\0\1\10\10\3\1\0\4\3\2\10\1\3\3\10"+
    "\2\0\2\3\12\0\4\10\7\3\2\10\1\3\1\0"+
    "\2\3\3\0\1\3\6\10\4\3\2\10\2\3\26\10"+
    "\1\3\7\10\1\3\2\10\1\3\2\10\1\3\2\10"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\10\1\3\1\10\7\3\14\0"+
    "\3\10\1\0\13\3\3\0\1\3\11\10\1\3\3\10"+
    "\1\3\26\10\1\3\7\10\1\3\2\10\1\3\5\10"+
    "\2\3\1\0\1\10\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\10\17\3\2\10\2\0\2\3\12\0\1\3"+
    "\1\10\7\3\1\10\6\0\1\3\3\0\1\3\10\10"+
    "\2\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\5\10\2\3\1\0\1\10\7\0\2\3\2\0"+
    "\2\3\3\0\7\3\3\0\4\3\2\10\1\3\3\10"+
    "\2\0\2\3\12\0\1\3\1\10\20\3\1\0\1\10"+
    "\1\3\6\10\3\3\3\10\1\3\4\10\3\3\2\10"+
    "\1\3\1\10\1\3\2\10\3\3\2\10\3\3\3\10"+
    "\3\3\14\10\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\10\6\3\1\0\16\3\12\0\11\3\1\10"+
    "\6\3\5\0\10\10\1\3\3\10\1\3\27\10\1\3"+
    "\20\10\2\3\1\0\1\10\7\0\1\3\3\0\1\3"+
    "\4\0\7\3\2\0\1\3\3\10\2\3\1\10\2\3"+
    "\2\10\2\0\2\3\12\0\20\3\1\10\3\0\1\3"+
    "\10\10\1\3\3\10\1\3\27\10\1\3\12\10\1\3"+
    "\5\10\2\3\1\0\1\10\7\0\1\3\3\0\1\3"+
    "\4\0\7\3\2\0\6\3\2\10\1\3\2\10\2\0"+
    "\2\3\12\0\1\3\2\10\1\0\14\3\4\0\11\10"+
    "\1\3\3\10\1\3\51\10\2\0\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\1\10\5\3\3\10\1\0\7\3"+
    "\3\10\2\0\2\3\12\0\12\3\6\10\1\3\3\0"+
    "\1\3\22\10\3\3\30\10\1\3\11\10\1\3\1\10"+
    "\2\3\7\10\3\3\1\0\4\3\6\0\1\3\1\0"+
    "\1\3\10\0\6\3\12\0\2\3\2\0\15\3\60\10"+
    "\1\0\2\10\7\0\4\3\10\10\10\0\1\3\12\0"+
    "\47\3\2\10\1\3\1\10\1\3\5\10\1\3\30\10"+
    "\1\3\1\10\1\3\12\10\1\0\2\10\11\0\1\10"+
    "\2\3\5\10\1\3\1\10\1\3\7\0\1\3\12\0"+
    "\2\3\4\10\40\3\1\10\27\3\2\0\6\3\12\0"+
    "\13\3\1\0\1\3\1\0\1\3\1\0\4\3\2\0"+
    "\10\10\1\3\44\10\4\3\24\0\1\3\2\0\5\10"+
    "\13\0\1\3\44\0\11\3\1\0\71\3\53\10\24\0"+
    "\1\10\12\0\6\3\6\10\4\0\4\10\3\0\1\10"+
    "\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10"+
    "\17\0\2\3\46\10\1\3\1\10\5\3\1\10\2\3"+
    "\53\10\1\3\115\10\1\3\4\10\2\3\7\10\1\3"+
    "\1\10\1\3\4\10\2\3\51\10\1\3\4\10\2\3"+
    "\41\10\1\3\4\10\2\3\7\10\1\3\1\10\1\3"+
    "\4\10\2\3\17\10\1\3\71\10\1\3\4\10\2\3"+
    "\103\10\2\3\3\0\40\3\20\10\20\3\126\10\2\3"+
    "\6\10\3\3\u016c\10\2\3\21\10\1\3\32\10\5\3"+
    "\113\10\3\3\13\10\7\3\22\10\4\0\11\3\23\10"+
    "\3\0\13\3\22\10\2\0\14\3\15\10\1\3\3\10"+
    "\1\3\2\0\14\3\64\10\40\0\3\3\1\10\3\3"+
    "\2\10\1\0\2\3\12\0\41\3\17\0\6\3\131\10"+
    "\7\3\5\10\2\0\42\10\1\0\1\10\5\3\106\10"+
    "\12\3\37\10\1\3\14\0\4\3\14\0\12\3\12\0"+
    "\36\10\2\3\5\10\13\3\54\10\4\3\32\10\6\3"+
    "\12\0\46\3\27\10\5\0\4\3\65\10\12\0\1\3"+
    "\35\0\2\3\13\0\6\3\12\0\15\3\1\10\10\3"+
    "\16\0\1\3\20\0\61\3\5\0\57\10\21\0\10\10"+
    "\3\3\12\0\21\3\11\0\14\3\3\0\36\10\15\0"+
    "\2\10\12\0\54\10\16\0\14\3\44\10\24\0\10\3"+
    "\12\0\3\3\3\10\12\0\44\10\2\3\11\10\7\3"+
    "\53\10\2\3\3\10\20\3\3\0\1\3\25\0\4\10"+
    "\1\0\6\10\1\0\2\10\3\0\1\10\5\3\300\10"+
    "\100\0\26\10\2\3\6\10\2\3\46\10\2\3\6\10"+
    "\2\3\10\10\1\3\1\10\1\3\1\10\1\3\1\10"+
    "\1\3\37\10\2\3\65\10\1\3\7\10\1\3\1\10"+
    "\3\3\3\10\1\3\7\10\3\3\4\10\2\3\6\10"+
    "\4\3\15\10\5\3\3\10\1\3\7\10\16\3\5\0"+
    "\32\3\5\0\20\3\2\10\23\3\1\10\13\3\5\0"+
    "\1\3\12\0\1\3\1\10\15\3\1\10\20\3\15\10"+
    "\3\3\41\10\17\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\10\4\3\1\10\2\3\12\10\1\3\1\10"+
    "\3\3\5\10\6\3\1\10\1\3\1\10\1\3\1\10"+
    "\1\3\4\10\1\3\13\10\2\3\4\10\5\3\5\10"+
    "\4\3\1\10\21\3\51\10\u0177\3\345\10\6\3\4\10"+
    "\3\0\2\10\14\3\46\10\1\3\1\10\5\3\1\10"+
    "\2\3\70\10\7\3\1\10\17\3\1\0\27\10\11\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\40\0\57\3\1\10\325\3\3\10\31\3\11\10\6\0"+
    "\1\3\5\10\2\3\5\10\4\3\126\10\2\3\2\0"+
    "\2\3\3\10\1\3\132\10\1\3\4\10\5\3\53\10"+
    "\1\3\136\10\21\3\40\10\60\3\320\10\100\3\215\10"+
    "\103\3\56\10\2\3\15\10\3\3\20\10\12\0\2\10"+
    "\24\3\57\10\1\0\4\3\12\0\1\3\37\10\2\0"+
    "\120\10\2\0\45\3\11\10\2\3\147\10\2\3\100\10"+
    "\5\3\2\10\1\3\1\10\1\3\5\10\30\3\20\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\5\0\4\3"+
    "\1\0\13\3\1\10\7\3\64\10\14\3\2\0\62\10"+
    "\22\0\12\3\12\0\6\3\22\0\6\10\3\3\1\10"+
    "\1\3\2\10\13\0\34\10\10\0\2\3\27\10\15\0"+
    "\14\3\35\10\3\3\4\0\57\10\16\0\16\3\1\10"+
    "\12\0\6\3\5\10\1\0\12\10\12\0\5\10\1\3"+
    "\51\10\16\0\11\3\3\10\1\0\10\10\2\0\2\3"+
    "\12\0\6\3\27\10\3\3\1\10\3\0\62\10\1\0"+
    "\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0"+
    "\1\10\30\3\3\10\2\3\13\10\5\0\2\3\3\10"+
    "\2\0\12\3\6\10\2\3\6\10\2\3\6\10\11\3"+
    "\7\10\1\3\7\10\1\3\53\10\1\3\16\10\6\3"+
    "\163\10\10\0\1\3\2\0\2\3\12\0\6\3\244\10"+
    "\14\3\27\10\4\3\61\10\4\3\156\10\2\3\152\10"+
    "\46\3\7\10\14\3\5\10\5\3\1\10\1\0\12\10"+
    "\1\3\15\10\1\3\5\10\1\3\1\10\1\3\2\10"+
    "\1\3\2\10\1\3\154\10\41\3\153\10\22\3\100\10"+
    "\2\3\66\10\50\3\15\10\3\3\20\0\20\3\20\0"+
    "\3\3\2\10\30\3\3\10\31\3\1\10\6\3\5\10"+
    "\1\3\207\10\2\3\1\0\4\3\1\10\13\3\12\0"+
    "\7\3\32\10\4\3\1\10\1\3\32\10\13\3\131\10"+
    "\3\3\6\10\2\3\6\10\2\3\6\10\2\3\3\10"+
    "\3\3\2\10\3\3\2\10\22\3\3\0\4\3\14\10"+
    "\1\3\32\10\1\3\23\10\1\3\2\10\1\3\17\10"+
    "\2\3\16\10\42\3\173\10\105\3\65\10\210\3\1\0"+
    "\202\3\35\10\3\3\61\10\17\3\1\0\37\3\40\10"+
    "\15\3\36\10\5\3\46\10\5\0\5\3\36\10\2\3"+
    "\44\10\4\3\10\10\1\3\5\10\52\3\236\10\2\3"+
    "\12\0\6\3\44\10\4\3\44\10\4\3\50\10\10\3"+
    "\64\10\14\3\13\10\1\3\17\10\1\3\7\10\1\3"+
    "\2\10\1\3\13\10\1\3\17\10\1\3\7\10\1\3"+
    "\2\10\103\3\67\10\11\3\26\10\12\3\10\10\30\3"+
    "\6\10\1\3\52\10\1\3\11\10\105\3\6\10\2\3"+
    "\1\10\1\3\54\10\1\3\2\10\3\3\1\10\2\3"+
    "\27\10\12\3\27\10\11\3\37\10\101\3\23\10\1\3"+
    "\2\10\12\3\26\10\12\3\32\10\106\3\70\10\6\3"+
    "\2\10\100\3\1\10\3\0\1\3\2\0\5\3\4\0"+
    "\4\10\1\3\3\10\1\3\35\10\2\3\3\0\4\3"+
    "\1\0\40\3\35\10\3\3\35\10\43\3\10\10\1\3"+
    "\34\10\2\0\31\3\66\10\12\3\26\10\12\3\23\10"+
    "\15\3\22\10\156\3\111\10\67\3\63\10\15\3\63\10"+
    "\15\3\44\10\4\0\10\3\12\0\u0146\3\52\10\1\3"+
    "\2\0\3\3\2\10\113\3\3\0\35\10\12\3\1\10"+
    "\10\3\26\10\13\0\37\3\22\10\4\0\52\3\25\10"+
    "\33\3\27\10\11\3\3\0\65\10\17\0\37\3\13\0"+
    "\2\10\2\0\1\10\11\3\4\0\55\10\13\0\2\3"+
    "\1\0\4\3\1\0\12\3\1\0\2\3\31\10\7\3"+
    "\12\0\6\3\3\0\44\10\16\0\1\3\12\0\4\3"+
    "\1\10\2\0\1\10\10\3\43\10\1\0\2\3\1\10"+
    "\11\3\3\0\60\10\16\0\4\10\4\3\4\0\1\3"+
    "\14\0\1\10\1\3\1\10\43\3\22\10\1\3\31\10"+
    "\14\0\6\3\1\0\2\10\1\0\76\3\7\10\1\3"+
    "\1\10\1\3\4\10\1\3\17\10\1\3\12\10\7\3"+
    "\57\10\14\0\5\3\12\0\6\3\4\0\1\3\10\10"+
    "\2\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\5\10\1\3\2\0\1\10\7\0\2\3\2\0"+
    "\2\3\3\0\2\3\1\10\6\3\1\0\5\3\5\10"+
    "\2\0\2\3\7\0\3\3\5\0\213\3\65\10\22\0"+
    "\4\10\5\3\12\0\4\3\1\0\3\10\36\3\60\10"+
    "\24\0\2\10\1\3\1\10\10\3\12\0\246\3\57\10"+
    "\7\0\2\3\11\0\27\3\4\10\2\0\42\3\60\10"+
    "\21\0\3\3\1\10\13\3\12\0\46\3\53\10\15\0"+
    "\1\10\7\3\12\0\66\3\33\10\2\3\17\0\4\3"+
    "\12\0\6\3\7\10\271\3\54\10\17\0\145\3\100\10"+
    "\12\0\25\3\10\10\2\3\1\10\2\3\10\10\1\3"+
    "\2\10\1\3\30\10\6\0\1\3\2\0\2\3\4\0"+
    "\1\10\1\0\1\10\2\0\14\3\12\0\106\3\10\10"+
    "\2\3\47\10\7\0\2\3\7\0\1\10\1\3\1\10"+
    "\1\0\33\3\1\10\12\0\50\10\7\0\1\10\4\0"+
    "\10\3\1\0\10\3\1\10\13\0\56\10\20\0\3\3"+
    "\1\10\22\3\111\10\7\3\11\10\1\3\45\10\10\0"+
    "\1\3\10\0\1\10\17\3\12\0\30\3\36\10\2\3"+
    "\26\0\1\3\16\0\111\3\7\10\1\3\2\10\1\3"+
    "\46\10\6\0\3\3\1\0\1\3\2\0\1\3\7\0"+
    "\1\10\1\0\10\3\12\0\6\3\6\10\1\3\2\10"+
    "\1\3\40\10\5\0\1\3\2\0\1\3\5\0\1\10"+
    "\7\3\12\0\u0136\3\23\10\4\0\11\3\2\0\1\10"+
    "\1\0\15\10\1\3\42\10\7\0\3\3\5\0\15\3"+
    "\12\0\126\3\1\10\54\3\4\10\37\3\232\10\146\3"+
    "\157\10\21\3\304\10\u014c\3\141\10\17\3\60\10\21\0"+
    "\6\10\17\0\252\3\107\10\271\3\71\10\7\3\37\10"+
    "\1\3\12\0\6\3\117\10\1\3\12\0\6\3\36\10"+
    "\2\3\5\0\13\3\60\10\7\0\11\3\4\10\14\3"+
    "\12\0\11\3\25\10\5\3\23\10\260\3\100\10\200\3"+
    "\113\10\4\3\1\0\1\10\67\0\7\3\4\0\15\10"+
    "\100\3\2\10\1\3\1\10\1\0\13\3\2\0\16\3"+
    "\370\10\10\3\326\10\52\3\11\10\u01e7\3\4\10\1\3"+
    "\7\10\1\3\2\10\1\3\43\10\17\3\1\10\35\3"+
    "\3\10\2\3\1\10\16\3\4\10\10\3\u018c\10\4\3"+
    "\153\10\5\3\15\10\3\3\11\10\7\3\12\10\3\3"+
    "\2\0\1\3\4\0\134\3\56\0\2\3\27\0\u011e\3"+
    "\5\0\3\3\26\0\2\3\7\0\36\3\4\0\224\3"+
    "\3\0\273\3\125\10\1\3\107\10\1\3\2\10\2\3"+
    "\1\10\2\3\2\10\2\3\4\10\1\3\14\10\1\3"+
    "\1\10\1\3\7\10\1\3\101\10\1\3\4\10\2\3"+
    "\10\10\1\3\7\10\1\3\34\10\1\3\4\10\1\3"+
    "\5\10\1\3\1\10\3\3\7\10\1\3\u0154\10\2\3"+
    "\31\10\1\3\31\10\1\3\37\10\1\3\31\10\1\3"+
    "\37\10\1\3\31\10\1\3\37\10\1\3\31\10\1\3"+
    "\37\10\1\3\31\10\1\3\10\10\2\3\151\0\4\3"+
    "\62\0\10\3\1\0\16\3\1\0\26\3\5\0\1\3"+
    "\17\0\120\3\37\10\6\3\6\10\325\3\7\0\1\3"+
    "\21\0\2\3\7\0\1\3\2\0\1\3\5\0\5\3"+
    "\76\10\41\3\1\0\160\3\55\10\3\3\7\0\7\10"+
    "\2\3\12\0\4\3\1\10\u0141\3\36\10\1\0\21\3"+
    "\54\10\16\0\5\3\1\10\320\3\34\10\16\0\346\3"+
    "\7\10\1\3\4\10\1\3\2\10\1\3\17\10\1\3"+
    "\305\10\13\3\7\0\51\3\104\10\7\0\1\10\4\3"+
    "\12\0\u0156\3\1\10\117\3\4\10\1\3\33\10\1\3"+
    "\2\10\1\3\1\10\2\3\1\10\1\3\12\10\1\3"+
    "\4\10\1\3\1\10\1\3\1\10\6\3\1\10\4\3"+
    "\1\10\1\3\1\10\1\3\1\10\1\3\3\10\1\3"+
    "\2\10\1\3\1\10\2\3\1\10\1\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\1\10\1\3\2\10\1\3"+
    "\1\10\2\3\4\10\1\3\7\10\1\3\4\10\1\3"+
    "\4\10\1\3\1\10\1\3\12\10\1\3\21\10\5\3"+
    "\3\10\1\3\5\10\1\3\21\10\u0134\3\12\0\6\3"+
    "\340\10\40\3\72\10\6\3\336\10\2\3\u0182\10\16\3"+
    "\u0131\10\37\3\36\10\342\3\113\10\5\3\u0160\10\121\3"+
    "\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\20\4\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\2\36\1\37\1\0\1\40\1\41\1\42"+
    "\1\0\2\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\0\1\52\1\53\4\17\1\51\1\54\1\0"+
    "\1\51\1\55\1\0\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\12\4\1\65\6\4\1\66\2\4\1\67"+
    "\26\4\1\70\1\71\1\0\1\72\3\0\1\73\1\0"+
    "\2\52\2\17\1\0\1\51\2\17\1\74\1\75\1\76"+
    "\1\77\17\4\1\100\1\4\1\101\3\4\1\102\2\4"+
    "\1\103\1\104\6\4\1\105\16\4\2\0\1\73\1\0"+
    "\3\17\1\106\3\4\1\107\1\110\1\111\1\112\5\4"+
    "\1\113\3\4\1\114\2\4\1\115\2\4\1\116\2\4"+
    "\1\117\2\4\1\120\5\4\1\121\1\122\3\4\1\123"+
    "\1\4\1\124\1\125\1\4\1\126\1\4\2\0\3\17"+
    "\2\4\1\127\1\130\1\131\6\4\1\132\15\4\1\133"+
    "\4\4\1\134\1\135\1\136\2\0\3\17\4\4\1\137"+
    "\1\140\1\4\1\141\1\4\1\142\1\143\1\144\4\4"+
    "\1\145\1\146\1\147\1\150\1\151\1\152\1\4\1\153"+
    "\1\4\1\154\3\17\1\155\1\156\1\4\1\157\1\160"+
    "\1\4\1\161\1\162\2\4\1\163\1\164\3\17\1\165"+
    "\2\4\1\166\3\17\1\4\1\167\3\17\1\170\2\17"+
    "\1\0\2\17\1\0\2\17\1\0\2\17\1\0\2\17"+
    "\1\0\2\17\1\0\1\17\1\51\1\0\1\51\1\0"+
    "\4\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\105\0\105\0\u02b2\0\u02f7\0\105"+
    "\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\105\0\u04da"+
    "\0\u051f\0\u0564\0\105\0\105\0\105\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\105\0\u0a3e"+
    "\0\105\0\105\0\105\0\u0114\0\105\0\u0a83\0\105\0\u0ac8"+
    "\0\105\0\105\0\105\0\u0b0d\0\105\0\u0b52\0\u0b97\0\105"+
    "\0\105\0\105\0\105\0\105\0\u0bdc\0\u0c21\0\u0c66\0\105"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\105\0\u0e04\0\u0e49"+
    "\0\105\0\u0e8e\0\105\0\u0ed3\0\105\0\105\0\105\0\u0f18"+
    "\0\105\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u019e\0\u13f2\0\u1437\0\u019e\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\105\0\105\0\u1a6a\0\105"+
    "\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\105\0\u1c08\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\105\0\105\0\u1deb"+
    "\0\u019e\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6"+
    "\0\u223b\0\u2280\0\u019e\0\u22c5\0\u230a\0\u234f\0\u019e\0\u2394"+
    "\0\u23d9\0\u019e\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u019e\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\105"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u019e\0\u019e\0\u019e\0\u019e\0\u2c79"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u019e\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u019e\0\u2ea1\0\u2ee6\0\u019e\0\u2f2b\0\u2f70\0\u019e\0\u2fb5"+
    "\0\u2ffa\0\u019e\0\u303f\0\u3084\0\u019e\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u31dd\0\u019e\0\u019e\0\u3222\0\u3267\0\u32ac\0\u019e"+
    "\0\u32f1\0\u019e\0\u019e\0\u3336\0\u019e\0\u337b\0\u33c0\0\u3405"+
    "\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u019e\0\u019e\0\u019e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u019e\0\u3741"+
    "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u019e\0\u3ac2\0\u3b07\0\u3b4c"+
    "\0\u3b91\0\u019e\0\u019e\0\u019e\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5"+
    "\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u019e\0\u019e\0\u3e43"+
    "\0\u019e\0\u3e88\0\u019e\0\u019e\0\u019e\0\u3ecd\0\u3f12\0\u3f57"+
    "\0\u3f9c\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u3fe1"+
    "\0\u019e\0\u4026\0\105\0\u406b\0\u40b0\0\u40f5\0\u019e\0\u019e"+
    "\0\u413a\0\u019e\0\u019e\0\u417f\0\u019e\0\u019e\0\u41c4\0\u4209"+
    "\0\u019e\0\u019e\0\u424e\0\u4293\0\u42d8\0\u019e\0\u431d\0\u4362"+
    "\0\u019e\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u019e\0\u44bb\0\u4500"+
    "\0\u4545\0\u019e\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3"+
    "\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b"+
    "\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4a64\0\u4aa9\0\u4aee"+
    "\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\4\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\6\10\1\34\1\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\10\1\45"+
    "\1\10\1\46\1\47\1\50\1\10\1\51\1\10\1\52"+
    "\1\53\1\54\1\10\1\55\1\56\2\10\1\57\1\60"+
    "\1\61\1\62\107\0\1\3\136\0\1\63\50\0\2\64"+
    "\1\65\1\64\1\66\1\64\1\67\37\64\1\0\36\64"+
    "\67\0\1\70\15\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\30\10\40\0\1\71\62\0\1\72"+
    "\21\0\1\73\50\0\2\74\1\75\1\74\1\76\6\74"+
    "\1\0\32\74\1\77\36\74\34\0\1\100\67\0\1\101"+
    "\14\0\1\102\71\0\1\103\12\0\1\104\74\0\5\105"+
    "\72\0\1\106\4\0\1\107\10\0\1\110\72\0\1\105"+
    "\1\0\1\111\1\112\1\113\1\114\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\1\122\7\0\1\116\1\117\1\120"+
    "\4\0\1\121\13\0\1\122\27\0\1\105\1\0\5\25"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\52\0\1\123\106\0\1\124\1\125"+
    "\104\0\1\126\104\0\1\127\1\130\103\0\1\131\50\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\132\15\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\133\14\10\1\134\2\10"+
    "\1\135\6\10\1\136\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\137\6\10\1\140\2\10"+
    "\1\141\2\10\1\142\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\143\10\10"+
    "\1\144\12\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\145\1\10\1\146\11\10"+
    "\1\147\1\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\150\11\10\1\151\2\10\1\152"+
    "\12\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\5\10\1\153\5\10\1\154\1\155\4\10"+
    "\1\156\6\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\15\10\1\157\12\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\15\10"+
    "\1\160\12\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\161\3\10\1\162\16\10\1\163"+
    "\4\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\1\164\17\10\1\165\2\10\1\166\4\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\167\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\170\2\10"+
    "\1\171\1\10\1\172\10\10\1\173\1\174\1\10\1\175"+
    "\1\10\1\176\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\10\10\1\177\7\10\1\200\7\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\15\10\1\201\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\7\10\1\202\1\203"+
    "\7\10\1\204\7\10\40\0\1\205\45\0\1\206\4\0"+
    "\1\65\173\0\1\207\15\0\1\75\1\0\1\76\6\0"+
    "\1\210\73\0\1\75\110\0\1\74\4\0\1\74\10\0"+
    "\3\211\1\212\16\0\1\74\3\0\1\74\3\0\1\74"+
    "\6\0\1\74\3\0\1\74\1\0\1\74\1\213\34\0"+
    "\5\105\7\0\1\116\1\117\1\120\11\0\1\116\1\117"+
    "\1\120\26\0\16\214\1\215\66\214\2\107\1\216\1\107"+
    "\1\217\100\107\22\0\1\105\1\0\1\111\1\112\1\113"+
    "\1\114\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\4\114\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\4\220\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\4\221\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\5\115\7\0\1\116\1\117\1\120\11\0\1\116\1\117"+
    "\1\120\45\0\1\222\1\0\1\222\2\0\5\223\116\0"+
    "\1\120\13\0\1\120\52\0\1\224\4\225\6\0\4\225"+
    "\6\0\6\225\62\0\1\226\104\0\1\227\1\230\47\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\231\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\20\10\1\232\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\15\10\1\233\12\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\234\23\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\235\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\21\10\1\236\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\1\237\27\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\240\27\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\14\10\1\241"+
    "\13\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\5\10\1\242\22\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\23\10\1\243"+
    "\4\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\21\10\1\244\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\245"+
    "\7\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\246\5\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\247"+
    "\15\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\15\10\1\250\12\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\251"+
    "\7\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\16\10\1\252\11\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\22\10\1\253"+
    "\5\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\254\13\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\10\1\255"+
    "\26\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\256\5\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\25\10\1\257"+
    "\2\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\12\10\1\260\15\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\2\10\1\261"+
    "\15\10\1\262\7\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\263\4\10\1\264"+
    "\12\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\1\10\1\265\26\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\266\1\10"+
    "\1\267\16\10\1\270\1\271\5\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\17\10\1\272"+
    "\10\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\1\273\14\10\1\274\12\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\10\10"+
    "\1\275\17\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\15\10\1\276\2\10\1\277\7\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\21\10\1\300\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\10\10\1\301\17\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\14\10\1\302\13\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\13\10\1\303\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\23\10\1\304\4\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\10\10\1\305\17\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\10\10\1\306\17\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\307\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\10\10\1\310\17\10\55\0\1\311\35\0\1\75"+
    "\1\0\1\76\6\0\1\210\10\0\4\212\57\0\1\75"+
    "\1\0\1\76\6\0\1\210\10\0\4\74\101\0\5\312"+
    "\6\0\4\312\6\0\6\312\26\0\16\214\1\313\66\214"+
    "\16\215\1\314\66\215\2\0\1\216\124\0\1\105\1\0"+
    "\4\315\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\4\316\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\45\0\5\223\100\0"+
    "\5\223\7\0\1\116\1\0\1\120\11\0\1\116\1\0"+
    "\1\120\52\0\1\224\4\225\6\0\4\225\1\121\5\0"+
    "\6\225\4\0\1\121\45\0\5\317\6\0\4\317\1\121"+
    "\5\0\6\317\4\0\1\121\55\0\1\320\50\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\20\10"+
    "\1\321\7\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\322\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\1\323"+
    "\27\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\324\23\10\4\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\325"+
    "\23\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\326\3\10\1\327\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\10\10\1\330\17\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\21\10\1\331\1\332\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\333\27\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\10\1\334\26\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\335\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\15\10\1\336\12\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\337\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\21\10\1\304\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\1\340\27\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\11\10\1\341\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\12\10"+
    "\1\342\2\10\1\343\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\6\10\1\344\21\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\10\10\1\345\17\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\10\10\1\346\17\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\12\10\1\347\15\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\11\10\1\350\16\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\24\10\1\351\3\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\2\10\1\352\17\10"+
    "\1\353\5\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\354\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\3\10"+
    "\1\355\24\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\15\10\1\356\12\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\23\10"+
    "\1\357\4\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\23\10\1\360\4\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\20\10"+
    "\1\361\7\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\20\10\1\362\7\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\16\10"+
    "\1\363\11\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\16\10\1\364\11\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\10\10"+
    "\1\365\17\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\16\10\1\366\11\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\22\10"+
    "\1\367\5\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\2\10\1\370\25\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\371\23\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\4\10\1\372\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\3\10"+
    "\1\373\24\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\374\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\7\10"+
    "\1\375\20\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\376\5\10\63\0\1\377"+
    "\51\0\5\u0100\6\0\4\u0100\6\0\6\u0100\26\0\16\214"+
    "\1\313\4\214\1\216\61\214\16\215\1\314\4\215\1\216"+
    "\61\215\22\0\1\105\1\0\4\u0101\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\43\0\1\105\1\0\4\u0102\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\45\0\5\u0103\6\0\4\u0103\1\121\5\0\6\u0103"+
    "\4\0\1\121\21\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\10\10\1\u0104\17\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u0105\23\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\11\10\1\u0106\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\13\10"+
    "\1\u0107\14\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\u0108\5\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\10\10"+
    "\1\u0109\17\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\23\10\1\u010a\4\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\12\10"+
    "\1\u010b\15\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\u010c\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\14\10"+
    "\1\u010d\3\10\1\u010e\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\u010f\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\u0110\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\20\10\1\u0111\7\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\12\10\1\u0112\15\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\24\10\1\u0113\3\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\u0114\27\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\u0115\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u0116\10\10\1\u0117\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\10\10\1\u0118\17\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\20\10\1\u0119\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\13\10\1\u011a\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\20\10\1\u011b\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u011c\23\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\22\10\1\u011d\5\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\14\10\1\u011e\13\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\u011f\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\2\10\1\u0120\25\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\15\10\1\u0121\2\10\1\u0122\7\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u0123\23\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\4\10\1\u0124\23\10\70\0\1\u0125"+
    "\44\0\5\u0126\6\0\4\u0126\6\0\6\u0126\50\0\1\105"+
    "\1\0\4\u0127\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\43\0\1\105"+
    "\1\0\4\u0128\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\45\0\5\u0129"+
    "\6\0\4\u0129\1\121\5\0\6\u0129\4\0\1\121\21\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u012a\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\u012b\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\14\10"+
    "\1\u012c\13\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\u012d\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u012e\23\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\u012f\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\3\10"+
    "\1\u0130\24\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\14\10\1\u0131\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\13\10"+
    "\1\u0132\14\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\u0133\5\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u0134\23\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\4\10\1\u0135\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\6\10"+
    "\1\u0136\21\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\u0137\5\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\2\10"+
    "\1\u0138\25\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\2\10\1\u0139\25\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\2\10"+
    "\1\u013a\25\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\3\10\1\u013b\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\u013c\23\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\14\10\1\u013d\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\3\10"+
    "\1\u013e\24\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\6\10\1\u013f\21\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\14\10"+
    "\1\u0140\13\10\4\0\1\10\7\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\7\10\1\u0141\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\23\10"+
    "\1\u0142\4\10\55\0\1\u0143\57\0\5\74\6\0\4\74"+
    "\6\0\6\74\50\0\1\105\1\0\4\u0144\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\43\0\1\105\1\0\4\u0145\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\45\0\5\u0146\6\0\4\u0146\1\121\5\0"+
    "\6\u0146\4\0\1\121\21\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\20\10\1\u0147\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\14\10\1\u0148\13\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\23\10\1\u0149\4\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\u014a\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\21\10\1\u014b\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u014c\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u014d\23\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u014e\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\22\10\1\u014f\5\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\15\10\1\u0150\12\10\4\0\1\10\7\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\3\10\1\u0151\24\10\4\0"+
    "\1\10\7\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\u0152\5\10\26\0\1\105\1\0\4\u0153\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\43\0\1\105\1\0\4\u0154\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\45\0\5\u0155\6\0\4\u0155\1\121"+
    "\5\0\6\u0155\4\0\1\121\21\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u0156\23\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\14\10\1\u0157\13\10\4\0\1\10\7\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u0158\23\10"+
    "\4\0\1\10\7\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\12\10\1\u0159\15\10\26\0\1\105\1\0\4\u015a"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\43\0\1\105\1\0\4\u015b"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\45\0\5\u015c\6\0\4\u015c"+
    "\1\121\5\0\6\u015c\4\0\1\121\21\0\1\10\7\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\22\10\1\u015d"+
    "\5\10\4\0\1\10\7\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\3\10\1\u015e\24\10\26\0\1\105\1\0"+
    "\4\u015f\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\4\u0160\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\45\0\5\u0161\6\0"+
    "\4\u0161\1\121\5\0\6\u0161\4\0\1\121\21\0\1\10"+
    "\7\0\1\10\13\0\5\10\6\0\6\10\4\0\21\10"+
    "\1\u0162\6\10\26\0\1\105\1\0\4\u0163\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\43\0\1\105\1\0\4\u0164\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\45\0\5\u0165\6\0\4\u0165\1\121\5\0"+
    "\6\u0165\4\0\1\121\43\0\1\105\1\0\4\u0166\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\43\0\1\105\1\0\4\u0167\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\45\0\5\u0168\6\0\4\u0168\1\121"+
    "\5\0\6\u0168\4\0\1\121\43\0\1\105\1\0\4\u0169"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\43\0\1\105\1\0\4\u016a"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\45\0\5\u016b\6\0\4\u016b"+
    "\1\121\5\0\6\u016b\4\0\1\121\43\0\1\105\1\0"+
    "\4\u016c\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\43\0\1\105\1\0"+
    "\4\u016d\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\45\0\5\u016e\6\0"+
    "\4\u016e\1\121\5\0\6\u016e\4\0\1\121\43\0\1\105"+
    "\1\0\4\u016f\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\43\0\1\105"+
    "\1\0\4\u0170\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\45\0\5\u0171"+
    "\6\0\4\u0171\1\121\5\0\6\u0171\4\0\1\121\43\0"+
    "\1\105\1\0\4\u0172\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\43\0"+
    "\1\105\1\0\4\u0173\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\45\0"+
    "\5\u0174\6\0\4\u0174\1\121\5\0\6\u0174\4\0\1\121"+
    "\43\0\1\105\1\0\4\u0175\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\43\0\1\105\1\0\4\u0176\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\45\0\5\u0177\6\0\4\u0177\1\121\5\0\6\u0177\4\0"+
    "\1\121\43\0\1\105\1\0\4\u0178\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\45\0\5\u0179\6\0\4\u0179\1\121\5\0\6\u0179"+
    "\4\0\1\121\43\0\1\105\1\0\4\u017a\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\64\0\1\121\17\0\1\121\43\0\1\105"+
    "\1\0\4\u017b\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\43\0\1\105"+
    "\1\0\4\u017c\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\43\0\1\105"+
    "\1\0\4\u017d\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\43\0\1\105"+
    "\1\0\5\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19596];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\3\11\21\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\1\1\11\1\0\3\11\1\0\1\11\1\1\1\0"+
    "\5\11\1\1\1\0\1\1\1\11\5\1\1\11\1\0"+
    "\1\1\1\11\1\0\1\11\1\1\3\11\1\1\1\11"+
    "\53\1\2\11\1\0\1\11\3\0\1\1\1\0\1\11"+
    "\3\1\1\0\3\1\2\11\61\1\2\0\1\1\1\0"+
    "\3\1\1\11\56\1\2\0\44\1\2\0\34\1\1\11"+
    "\41\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /// --------------------
            /// Public Static Fields

            public static boolean   Debug       = false ;
            public static String    CurrentLine = ""    ;
            public static int       LineCount   = 0     ;
            public static int       Spaces      = 0     ;

            /// --------------
            /// Public Methods

            public void addToLine(String string, int line) {

                CurrentLine = (line != LineCount) ? string : CurrentLine + string;

                LineCount = line;

            }

            public void addLineComment() {

                final String line = "Comment, line "
                    + (yyline + 1) + " [" + (yycolumn + 1 + Spaces) + ":" + (yycolumn + yylength()) + "]";

                final Token token = (yytext().startsWith("/*"))
                    ? new Token(Types.INSTANCE.MULTILINE_COMMENT,
                        "Multi-line " + line, yyline + 1, yycolumn + 1, yycolumn + yylength())
                    : new Token(Types.INSTANCE.SINGLELINE_COMMENT,
                        "Single-line " + line, yyline + 1, yycolumn + 1, yycolumn + yylength());

            }

            public void countSpaces(int line) {

                Spaces = line;

            }

            private java_cup.runtime.Symbol token(int kind) {

                this.addToLine(yytext(), yyline+1);

                final Token token = new Token(kind, yytext(), yyline + 1, yycolumn + 1, yycolumn + yylength());

                if(Debug) System.out.println(token);

                return new java_cup.runtime.Symbol(kind, token);

            }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1))                     ;
            }
            // fall through
          case 121: break;
          case 2:
            { addToLine(yytext(), yyline+1)                                                   ;
            }
            // fall through
          case 122: break;
          case 3:
            { return token(sym.NOT)                                                                              ;
            }
            // fall through
          case 123: break;
          case 4:
            { return token(sym.IDENTIFIER)                                                    ;
            }
            // fall through
          case 124: break;
          case 5:
            { return token(sym.MOD)                                                                              ;
            }
            // fall through
          case 125: break;
          case 6:
            { return token(sym.AND)                                                                              ;
            }
            // fall through
          case 126: break;
          case 7:
            { return token(sym.LPAREN)                                                                           ;
            }
            // fall through
          case 127: break;
          case 8:
            { return token(sym.RPAREN)                                                                           ;
            }
            // fall through
          case 128: break;
          case 9:
            { return token(sym.MULT)                                                                             ;
            }
            // fall through
          case 129: break;
          case 10:
            { return token(sym.PLUS)                                                                             ;
            }
            // fall through
          case 130: break;
          case 11:
            { return token(sym.COMMA)                                                                            ;
            }
            // fall through
          case 131: break;
          case 12:
            { return token(sym.MINUS)                                                                            ;
            }
            // fall through
          case 132: break;
          case 13:
            { return token(sym.DOT)                                                                              ;
            }
            // fall through
          case 133: break;
          case 14:
            { return token(sym.DIV)                                                                              ;
            }
            // fall through
          case 134: break;
          case 15:
            { return token(sym.INTEGER_LITERAL)                                               ;
            }
            // fall through
          case 135: break;
          case 16:
            { return token(sym.COLON)                                                                            ;
            }
            // fall through
          case 136: break;
          case 17:
            { return token(sym.SEMICOLON)                                                                        ;
            }
            // fall through
          case 137: break;
          case 18:
            { return token(sym.LT)                                                                               ;
            }
            // fall through
          case 138: break;
          case 19:
            { return token(sym.EQ)                                                                               ;
            }
            // fall through
          case 139: break;
          case 20:
            { return token(sym.GT)                                                                               ;
            }
            // fall through
          case 140: break;
          case 21:
            { return token(sym.QUEST)                                                                            ;
            }
            // fall through
          case 141: break;
          case 22:
            { return token(sym.LBRACK)                                                                           ;
            }
            // fall through
          case 142: break;
          case 23:
            { return token(sym.RBRACK)                                                                           ;
            }
            // fall through
          case 143: break;
          case 24:
            { return token(sym.XOR)                                                                              ;
            }
            // fall through
          case 144: break;
          case 25:
            { return token(sym.LBRACE)                                                                           ;
            }
            // fall through
          case 145: break;
          case 26:
            { return token(sym.OR)                                                                               ;
            }
            // fall through
          case 146: break;
          case 27:
            { return token(sym.RBRACE)                                                                           ;
            }
            // fall through
          case 147: break;
          case 28:
            { return token(sym.COMP)                                                                             ;
            }
            // fall through
          case 148: break;
          case 29:
            { return token(sym.NOTEQ)                                                                            ;
            }
            // fall through
          case 149: break;
          case 30:
            { throw new RuntimeException("Unterminated string at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1))    ;
            }
            // fall through
          case 150: break;
          case 31:
            { return token(sym.STRING_LITERAL)                                                ;
            }
            // fall through
          case 151: break;
          case 32:
            { return token(sym.MODEQ)                                                                            ;
            }
            // fall through
          case 152: break;
          case 33:
            { return token(sym.ANDAND)                                                                           ;
            }
            // fall through
          case 153: break;
          case 34:
            { return token(sym.ANDEQ)                                                                            ;
            }
            // fall through
          case 154: break;
          case 35:
            { throw new RuntimeException("Unterminated character at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1)) ;
            }
            // fall through
          case 155: break;
          case 36:
            { return token(sym.MULTEQ)                                                                           ;
            }
            // fall through
          case 156: break;
          case 37:
            { return token(sym.PLUSPLUS)                                                                         ;
            }
            // fall through
          case 157: break;
          case 38:
            { return token(sym.PLUSEQ)                                                                           ;
            }
            // fall through
          case 158: break;
          case 39:
            { return token(sym.MINUSMINUS)                                                                       ;
            }
            // fall through
          case 159: break;
          case 40:
            { return token(sym.MINUSEQ)                                                                          ;
            }
            // fall through
          case 160: break;
          case 41:
            { return token(sym.FLOAT_LITERAL)                                                 ;
            }
            // fall through
          case 161: break;
          case 42:
            { addToLine(yytext(), yyline+1); addLineComment()                                 ;
            }
            // fall through
          case 162: break;
          case 43:
            { return token(sym.DIVEQ)                                                                            ;
            }
            // fall through
          case 163: break;
          case 44:
            { return token(sym.DOUBLE_LITERAL)                                                ;
            }
            // fall through
          case 164: break;
          case 45:
            { return token(sym.LONG_LITERAL)                                                  ;
            }
            // fall through
          case 165: break;
          case 46:
            { return token(sym.COLONCOLON)                                                                       ;
            }
            // fall through
          case 166: break;
          case 47:
            { return token(sym.LSHIFT)                                                                           ;
            }
            // fall through
          case 167: break;
          case 48:
            { return token(sym.LTEQ)                                                                             ;
            }
            // fall through
          case 168: break;
          case 49:
            { return token(sym.EQEQ)                                                                             ;
            }
            // fall through
          case 169: break;
          case 50:
            { return token(sym.GTEQ)                                                                             ;
            }
            // fall through
          case 170: break;
          case 51:
            { return token(sym.RSHIFT)                                                                           ;
            }
            // fall through
          case 171: break;
          case 52:
            { return token(sym.XOREQ)                                                                            ;
            }
            // fall through
          case 172: break;
          case 53:
            { return token(sym.DO)                                                                              ;
            }
            // fall through
          case 173: break;
          case 54:
            { return token(sym.IF)                                                                              ;
            }
            // fall through
          case 174: break;
          case 55:
            { return token(sym.IS)                                                                              ;
            }
            // fall through
          case 175: break;
          case 56:
            { return token(sym.OREQ)                                                                             ;
            }
            // fall through
          case 176: break;
          case 57:
            { return token(sym.OROR)                                                                             ;
            }
            // fall through
          case 177: break;
          case 58:
            { return token(sym.CHARACTER_LITERAL)                                             ;
            }
            // fall through
          case 178: break;
          case 59:
            { throw new RuntimeException("Unterminated comment at EOF at line "+(yyline+1)+", column "+(yycolumn+1))                            ;
            }
            // fall through
          case 179: break;
          case 60:
            { return token(sym.LSHIFTEQ)                                                                         ;
            }
            // fall through
          case 180: break;
          case 61:
            { return token(sym.RSHIFTEQ)                                                                         ;
            }
            // fall through
          case 181: break;
          case 62:
            { return token(sym.RRSHIFT)                                                                          ;
            }
            // fall through
          case 182: break;
          case 63:
            { return token(sym.ALT)                                                                              ;
            }
            // fall through
          case 183: break;
          case 64:
            { return token(sym.FOR)                                                                             ;
            }
            // fall through
          case 184: break;
          case 65:
            { return token(sym.INT)                                                                              ;
            }
            // fall through
          case 185: break;
          case 66:
            { return token(sym.NEW)                                                                             ;
            }
            // fall through
          case 186: break;
          case 67:
            { return token(sym.PAR)                                                                              ;
            }
            // fall through
          case 187: break;
          case 68:
            { return token(sym.PRI)                                                                              ;
            }
            // fall through
          case 188: break;
          case 69:
            { return token(sym.SEQ)                                                                              ;
            }
            // fall through
          case 189: break;
          case 70:
            { return token(sym.RRSHIFTEQ)                                                                        ;
            }
            // fall through
          case 190: break;
          case 71:
            { return token(sym.BYTE)                                                                             ;
            }
            // fall through
          case 191: break;
          case 72:
            { return token(sym.CASE)                                                                            ;
            }
            // fall through
          case 192: break;
          case 73:
            { return token(sym.CHAN)                                                                             ;
            }
            // fall through
          case 193: break;
          case 74:
            { return token(sym.CHAR)                                                                             ;
            }
            // fall through
          case 194: break;
          case 75:
            { return token(sym.ELSE)                                                                            ;
            }
            // fall through
          case 195: break;
          case 76:
            { return token(sym.FORK)                                                                             ;
            }
            // fall through
          case 196: break;
          case 77:
            { return token(sym.LONG)                                                                             ;
            }
            // fall through
          case 197: break;
          case 78:
            { return token(sym.NULL_LITERAL)                                                                     ;
            }
            // fall through
          case 198: break;
          case 79:
            { return token(sym.PROC)                                                                             ;
            }
            // fall through
          case 199: break;
          case 80:
            { return token(sym.READ)                                                                             ;
            }
            // fall through
          case 200: break;
          case 81:
            { return token(sym.SKIP)                                                                             ;
            }
            // fall through
          case 201: break;
          case 82:
            { return token(sym.STOP)                                                                             ;
            }
            // fall through
          case 202: break;
          case 83:
            { return token(sym.SYNC)                                                                             ;
            }
            // fall through
          case 203: break;
          case 84:
            { return token(sym.BOOLEAN_LITERAL)                                                                  ;
            }
            // fall through
          case 204: break;
          case 85:
            { return token(sym.VOID)                                                                             ;
            }
            // fall through
          case 205: break;
          case 86:
            { return token(sym.WITH)                                                                             ;
            }
            // fall through
          case 206: break;
          case 87:
            { return token(sym.BREAK)                                                                           ;
            }
            // fall through
          case 207: break;
          case 88:
            { return token(sym.CLAIM)                                                                            ;
            }
            // fall through
          case 208: break;
          case 89:
            { return token(sym.CONST)                                                                            ;
            }
            // fall through
          case 209: break;
          case 90:
            { return token(sym.FLOAT)                                                                            ;
            }
            // fall through
          case 210: break;
          case 91:
            { return token(sym.SHORT)                                                                            ;
            }
            // fall through
          case 211: break;
          case 92:
            { return token(sym.TIMER)                                                                            ;
            }
            // fall through
          case 212: break;
          case 93:
            { return token(sym.WHILE)                                                                           ;
            }
            // fall through
          case 213: break;
          case 94:
            { return token(sym.WRITE)                                                                            ;
            }
            // fall through
          case 214: break;
          case 95:
            { return token(sym.DOUBLE)                                                                           ;
            }
            // fall through
          case 215: break;
          case 96:
            { return token(sym.ENROLL)                                                                           ;
            }
            // fall through
          case 216: break;
          case 97:
            { return token(sym.EXTERN)                                                                           ;
            }
            // fall through
          case 217: break;
          case 98:
            { return token(sym.IMPORT)                                                                          ;
            }
            // fall through
          case 218: break;
          case 99:
            { return token(sym.MOBILE)                                                                           ;
            }
            // fall through
          case 219: break;
          case 100:
            { return token(sym.NATIVE)                                                                           ;
            }
            // fall through
          case 220: break;
          case 101:
            { return token(sym.PUBLIC)                                                                           ;
            }
            // fall through
          case 221: break;
          case 102:
            { return token(sym.RECORD)                                                                           ;
            }
            // fall through
          case 222: break;
          case 103:
            { return token(sym.RESUME)                                                                           ;
            }
            // fall through
          case 223: break;
          case 104:
            { return token(sym.RETURN)                                                                          ;
            }
            // fall through
          case 224: break;
          case 105:
            { return token(sym.SHARED)                                                                           ;
            }
            // fall through
          case 225: break;
          case 106:
            { return token(sym.STRING)                                                                           ;
            }
            // fall through
          case 226: break;
          case 107:
            { return token(sym.SWITCH)                                                                          ;
            }
            // fall through
          case 227: break;
          case 108:
            { return token(sym.PRAGMA)                                                                          ;
            }
            // fall through
          case 228: break;
          case 109:
            { return token(sym.BARRIER)                                                                          ;
            }
            // fall through
          case 229: break;
          case 110:
            { return token(sym.BOOLEAN)                                                                          ;
            }
            // fall through
          case 230: break;
          case 111:
            { return token(sym.DEFAULT)                                                                         ;
            }
            // fall through
          case 231: break;
          case 112:
            { return token(sym.EXTENDS)                                                                         ;
            }
            // fall through
          case 232: break;
          case 113:
            { return token(sym.PACKAGE)                                                                         ;
            }
            // fall through
          case 233: break;
          case 114:
            { return token(sym.PRIVATE)                                                                          ;
            }
            // fall through
          case 234: break;
          case 115:
            { return token(sym.SUSPEND)                                                                          ;
            }
            // fall through
          case 235: break;
          case 116:
            { return token(sym.TIMEOUT)                                                                          ;
            }
            // fall through
          case 236: break;
          case 117:
            { return token(sym.CONTINUE)                                                                        ;
            }
            // fall through
          case 237: break;
          case 118:
            { return token(sym.PROTOCOL)                                                                         ;
            }
            // fall through
          case 238: break;
          case 119:
            { return token(sym.PROTECTED)                                                                        ;
            }
            // fall through
          case 239: break;
          case 120:
            { return token(sym.IMPLEMENTS)                                                                      ;
            }
            // fall through
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
