// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/resources/flex/ProcessJ.flex

package org.processj.scanner;

import org.processj.ast.*;
import org.processj.syntax.*;
import org.processj.parser.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  5, 
     1,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
    21, 22, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 29, 30, 31, 
     5, 32, 32, 32, 33, 34, 35,  9,  9,  9,  9,  9, 36,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9, 37,  9,  9, 38, 39, 40, 41,  9, 
     5, 42, 43, 44, 45, 46, 47, 48, 49, 50,  9, 51, 52, 53, 54, 55, 
    56, 57, 58, 59, 60, 61, 62, 63, 64, 65,  9, 66, 67, 68, 69,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\20\4\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\2\36\1\37\1\0\1\40\1\41\1\42"+
    "\1\0\2\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\0\1\52\1\53\4\17\2\51\1\0\1\54"+
    "\1\55\1\0\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\12\4\1\65\6\4\1\66\2\4\1\67\26\4"+
    "\1\70\1\71\1\0\1\72\3\0\1\73\1\0\2\52"+
    "\2\17\1\0\1\51\2\17\1\74\1\75\1\76\1\77"+
    "\17\4\1\100\1\4\1\101\3\4\1\102\2\4\1\103"+
    "\1\104\6\4\1\105\16\4\2\0\1\73\1\0\3\17"+
    "\1\106\3\4\1\107\1\110\1\111\1\112\5\4\1\113"+
    "\3\4\1\114\2\4\1\115\2\4\1\116\2\4\1\117"+
    "\2\4\1\120\5\4\1\121\1\122\3\4\1\123\1\4"+
    "\1\124\1\125\1\4\1\126\1\4\2\0\3\17\2\4"+
    "\1\127\1\130\1\131\6\4\1\132\15\4\1\133\4\4"+
    "\1\134\1\135\1\136\2\0\3\17\4\4\1\137\1\140"+
    "\1\4\1\141\1\4\1\142\1\143\1\144\4\4\1\145"+
    "\1\146\1\147\1\150\1\151\1\152\1\4\1\153\1\4"+
    "\1\154\3\17\1\155\1\156\1\4\1\157\1\160\1\4"+
    "\1\161\1\162\2\4\1\163\1\164\3\17\1\165\2\4"+
    "\1\166\3\17\1\4\1\167\3\17\1\170\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\1\17\1\51\1\0\1\51\1\0\4\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\106\0\106\0\u02bc\0\u0302\0\106"+
    "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\106\0\u04ec"+
    "\0\u0532\0\u0578\0\106\0\106\0\106\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\106\0\u0a64"+
    "\0\106\0\106\0\106\0\u0118\0\106\0\u0aaa\0\106\0\u0af0"+
    "\0\106\0\106\0\106\0\u0b36\0\106\0\u0b7c\0\u0bc2\0\106"+
    "\0\106\0\106\0\106\0\106\0\u0c08\0\u0c4e\0\u0c94\0\106"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\106\0\u0e38\0\106"+
    "\0\106\0\u0e7e\0\106\0\u0ec4\0\106\0\106\0\106\0\u0f0a"+
    "\0\106\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u01a4\0\u13f6\0\u143c\0\u01a4\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\106\0\106\0\u1a86\0\106"+
    "\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\106\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\106\0\106\0\u1e14"+
    "\0\u01a4\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u01a4\0\u2300\0\u2346\0\u238c\0\u01a4\0\u23d2"+
    "\0\u2418\0\u01a4\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u01a4\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\106"+
    "\0\u2c06\0\u2c4c\0\u2c92\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u01a4\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u01a4\0\u2f08\0\u2f4e\0\u01a4\0\u2f94\0\u2fda\0\u01a4\0\u3020"+
    "\0\u3066\0\u01a4\0\u30ac\0\u30f2\0\u01a4\0\u3138\0\u317e\0\u31c4"+
    "\0\u320a\0\u3250\0\u01a4\0\u01a4\0\u3296\0\u32dc\0\u3322\0\u01a4"+
    "\0\u3368\0\u01a4\0\u01a4\0\u33ae\0\u01a4\0\u33f4\0\u343a\0\u3480"+
    "\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u01a4\0\u37c8"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u01a4\0\u3b56\0\u3b9c\0\u3be2"+
    "\0\u3c28\0\u01a4\0\u01a4\0\u01a4\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u01a4\0\u01a4\0\u3ee4"+
    "\0\u01a4\0\u3f2a\0\u01a4\0\u01a4\0\u01a4\0\u3f70\0\u3fb6\0\u3ffc"+
    "\0\u4042\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u4088"+
    "\0\u01a4\0\u40ce\0\106\0\u4114\0\u415a\0\u41a0\0\u01a4\0\u01a4"+
    "\0\u41e6\0\u01a4\0\u01a4\0\u422c\0\u01a4\0\u01a4\0\u4272\0\u42b8"+
    "\0\u01a4\0\u01a4\0\u42fe\0\u4344\0\u438a\0\u01a4\0\u43d0\0\u4416"+
    "\0\u01a4\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u01a4\0\u4574\0\u45ba"+
    "\0\u4600\0\u01a4\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\4\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\6\10\1\34\1\2\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\10"+
    "\1\45\1\10\1\46\1\47\1\50\1\10\1\51\1\10"+
    "\1\52\1\53\1\54\1\10\1\55\1\56\2\10\1\57"+
    "\1\60\1\61\1\62\110\0\1\3\140\0\1\63\50\0"+
    "\2\64\1\65\1\64\1\66\2\64\1\67\37\64\1\0"+
    "\36\64\70\0\1\70\15\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\30\10\41\0\1\71\63\0"+
    "\1\72\21\0\1\73\50\0\2\74\1\75\1\74\1\76"+
    "\7\74\1\0\32\74\1\77\36\74\35\0\1\100\70\0"+
    "\1\101\14\0\1\102\72\0\1\103\12\0\1\104\75\0"+
    "\5\105\73\0\1\106\4\0\1\107\10\0\1\110\73\0"+
    "\1\105\1\0\1\111\1\112\1\113\1\114\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\1\122\7\0\1\116\1\117"+
    "\1\120\4\0\1\121\13\0\1\122\30\0\1\105\1\0"+
    "\5\25\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\53\0\1\123\107\0\1\124"+
    "\1\125\105\0\1\126\105\0\1\127\1\130\104\0\1\131"+
    "\50\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\12\10\1\132\15\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\1\133\14\10\1\134"+
    "\2\10\1\135\6\10\1\136\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\1\137\6\10\1\140"+
    "\2\10\1\141\2\10\1\142\12\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\143"+
    "\10\10\1\144\12\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\12\10\1\145\1\10\1\146"+
    "\11\10\1\147\1\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\150\11\10\1\151\2\10"+
    "\1\152\12\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\5\10\1\153\5\10\1\154\1\155"+
    "\4\10\1\156\6\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\15\10\1\157\12\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\15\10\1\160\12\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\161\3\10\1\162\16\10"+
    "\1\163\4\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\164\17\10\1\165\2\10\1\166"+
    "\4\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\167\23\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\170"+
    "\2\10\1\171\1\10\1\172\10\10\1\173\1\174\1\10"+
    "\1\175\1\10\1\176\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\177\7\10\1\200"+
    "\7\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\15\10\1\201\12\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\7\10\1\202"+
    "\1\203\7\10\1\204\7\10\41\0\1\205\45\0\1\206"+
    "\4\0\1\65\175\0\1\207\15\0\1\75\1\0\1\76"+
    "\7\0\1\210\73\0\1\75\112\0\1\74\4\0\1\74"+
    "\10\0\3\211\1\212\16\0\1\74\3\0\1\74\3\0"+
    "\1\74\6\0\1\74\3\0\1\74\1\0\1\74\1\213"+
    "\35\0\5\105\7\0\1\116\1\117\1\120\11\0\1\116"+
    "\1\117\1\120\26\0\17\214\1\215\66\214\2\107\1\216"+
    "\1\107\1\217\101\107\23\0\1\105\1\0\1\111\1\112"+
    "\1\113\1\114\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\44\0\1\105"+
    "\1\0\4\114\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\44\0\1\105"+
    "\1\0\4\220\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\44\0\1\105"+
    "\1\0\4\221\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\44\0\1\105"+
    "\1\0\5\115\7\0\1\116\1\117\1\120\11\0\1\116"+
    "\1\117\1\120\46\0\1\222\1\0\1\222\2\0\5\223"+
    "\101\0\1\224\4\225\6\0\4\225\6\0\6\225\63\0"+
    "\1\226\105\0\1\227\1\230\47\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\231\5\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\20\10\1\232\7\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\15\10\1\233\12\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\234\23\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\235\5\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\21\10\1\236\6\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\1\237\27\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\1\240\27\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\14\10\1\241\13\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\5\10"+
    "\1\242\22\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\23\10\1\243\4\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\21\10"+
    "\1\244\6\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\20\10\1\245\7\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\22\10"+
    "\1\246\5\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\12\10\1\247\15\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\15\10"+
    "\1\250\12\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\20\10\1\251\7\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\16\10"+
    "\1\252\11\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\253\5\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\14\10"+
    "\1\254\13\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\10\1\255\26\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\22\10"+
    "\1\256\5\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\25\10\1\257\2\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\12\10"+
    "\1\260\15\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\2\10\1\261\15\10\1\262\7\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\10\10\1\263\4\10\1\264\12\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\10"+
    "\1\265\26\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\1\266\1\10\1\267\16\10\1\270"+
    "\1\271\5\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\17\10\1\272\10\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\1\273"+
    "\14\10\1\274\12\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\275\17\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\15\10\1\276\2\10\1\277\7\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\21\10\1\300"+
    "\6\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\301\17\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\14\10\1\302"+
    "\13\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\13\10\1\303\14\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\23\10\1\304"+
    "\4\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\305\17\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\10\10\1\306"+
    "\17\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\307\5\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\10\10\1\310"+
    "\17\10\56\0\1\311\35\0\1\75\1\0\1\76\7\0"+
    "\1\210\10\0\4\212\57\0\1\75\1\0\1\76\7\0"+
    "\1\210\10\0\4\74\102\0\5\312\6\0\4\312\6\0"+
    "\6\312\26\0\17\214\1\313\66\214\17\215\1\314\66\215"+
    "\2\0\1\216\126\0\1\105\1\0\4\315\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\44\0\1\105\1\0\4\316\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\46\0\5\223\101\0\5\223\7\0\1\116"+
    "\1\0\1\120\11\0\1\116\1\0\1\120\53\0\1\224"+
    "\4\225\6\0\4\225\1\121\5\0\6\225\4\0\1\121"+
    "\46\0\5\317\6\0\4\317\1\121\5\0\6\317\4\0"+
    "\1\121\56\0\1\320\50\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\20\10\1\321\7\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\322\15\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\1\323\27\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\4\10"+
    "\1\324\23\10\4\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\4\10\1\325\23\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\14\10"+
    "\1\326\3\10\1\327\7\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\10\10\1\330\17\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\21\10\1\331\1\332\5\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\333\27\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\10\1\334\26\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\335\23\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\15\10\1\336\12\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\337\23\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\21\10\1\304\6\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\1\340\27\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\11\10\1\341\16\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\12\10\1\342\2\10\1\343"+
    "\12\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\6\10\1\344\21\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\10\10\1\345"+
    "\17\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\346\17\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\347"+
    "\15\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\11\10\1\350\16\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\24\10\1\351"+
    "\3\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\2\10\1\352\17\10\1\353\5\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\354\15\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\3\10\1\355\24\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\15\10\1\356\12\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\23\10\1\357\4\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\23\10\1\360\4\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\20\10\1\361\7\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\20\10\1\362\7\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\16\10\1\363\11\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\16\10\1\364\11\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\365\17\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\16\10\1\366\11\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\22\10\1\367\5\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\2\10\1\370\25\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\371\23\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\372\23\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\3\10\1\373\24\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\374\15\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\7\10\1\375\20\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\376\5\10\64\0\1\377\52\0\5\u0100\6\0"+
    "\4\u0100\6\0\6\u0100\26\0\17\214\1\313\4\214\1\216"+
    "\61\214\17\215\1\314\4\215\1\216\61\215\23\0\1\105"+
    "\1\0\4\u0101\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\44\0\1\105"+
    "\1\0\4\u0102\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\46\0\5\u0103"+
    "\6\0\4\u0103\1\121\5\0\6\u0103\4\0\1\121\21\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\10\10\1\u0104\17\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0105\23\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\11\10\1\u0106\16\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\13\10\1\u0107\14\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\u0108\5\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\10\10\1\u0109\17\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\23\10\1\u010a\4\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\12\10\1\u010b\15\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\u010c\15\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\14\10\1\u010d\3\10\1\u010e"+
    "\7\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\22\10\1\u010f\5\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u0110"+
    "\23\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\20\10\1\u0111\7\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\u0112"+
    "\15\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\24\10\1\u0113\3\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\1\u0114\27\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\u0115\27\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0116\10\10\1\u0117"+
    "\12\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\10\10\1\u0118\17\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\u0119"+
    "\7\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\13\10\1\u011a\14\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\20\10\1\u011b"+
    "\7\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\u011c\23\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\22\10\1\u011d"+
    "\5\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\14\10\1\u011e\13\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\4\10\1\u011f"+
    "\23\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\2\10\1\u0120\25\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\15\10\1\u0121"+
    "\2\10\1\u0122\7\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0123\23\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u0124\23\10\71\0\1\u0125\45\0\5\u0126\6\0"+
    "\4\u0126\6\0\6\u0126\51\0\1\105\1\0\4\u0127\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\44\0\1\105\1\0\4\u0128\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\46\0\5\u0129\6\0\4\u0129\1\121"+
    "\5\0\6\u0129\4\0\1\121\21\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u012a\23\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\1\u012b\27\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\14\10\1\u012c\13\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\u012d\15\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u012e\23\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\12\10\1\u012f\15\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\3\10\1\u0130\24\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\14\10\1\u0131\13\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\13\10\1\u0132\14\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\u0133\5\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u0134\23\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\4\10\1\u0135\23\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\6\10\1\u0136\21\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\22\10\1\u0137\5\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\2\10\1\u0138\25\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\2\10\1\u0139\25\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\2\10\1\u013a\25\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\3\10\1\u013b\24\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\4\10\1\u013c\23\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\14\10\1\u013d\13\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\3\10\1\u013e\24\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\6\10\1\u013f\21\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\14\10\1\u0140\13\10\4\0"+
    "\1\10\10\0\1\10\13\0\5\10\6\0\6\10\4\0"+
    "\7\10\1\u0141\20\10\4\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\23\10\1\u0142\4\10\56\0"+
    "\1\u0143\60\0\5\74\6\0\4\74\6\0\6\74\51\0"+
    "\1\105\1\0\4\u0144\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\44\0"+
    "\1\105\1\0\4\u0145\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\46\0"+
    "\5\u0146\6\0\4\u0146\1\121\5\0\6\u0146\4\0\1\121"+
    "\21\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\20\10\1\u0147\7\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\14\10\1\u0148\13\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\23\10\1\u0149\4\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\u014a\5\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\21\10\1\u014b\6\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u014c\23\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\4\10\1\u014d\23\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\4\10\1\u014e\23\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\22\10\1\u014f\5\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\15\10\1\u0150\12\10"+
    "\4\0\1\10\10\0\1\10\13\0\5\10\6\0\6\10"+
    "\4\0\3\10\1\u0151\24\10\4\0\1\10\10\0\1\10"+
    "\13\0\5\10\6\0\6\10\4\0\22\10\1\u0152\5\10"+
    "\27\0\1\105\1\0\4\u0153\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\44\0\1\105\1\0\4\u0154\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\46\0\5\u0155\6\0\4\u0155\1\121\5\0\6\u0155\4\0"+
    "\1\121\21\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\u0156\23\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\14\10\1\u0157"+
    "\13\10\4\0\1\10\10\0\1\10\13\0\5\10\6\0"+
    "\6\10\4\0\4\10\1\u0158\23\10\4\0\1\10\10\0"+
    "\1\10\13\0\5\10\6\0\6\10\4\0\12\10\1\u0159"+
    "\15\10\27\0\1\105\1\0\4\u015a\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\44\0\1\105\1\0\4\u015b\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\46\0\5\u015c\6\0\4\u015c\1\121\5\0\6\u015c"+
    "\4\0\1\121\21\0\1\10\10\0\1\10\13\0\5\10"+
    "\6\0\6\10\4\0\22\10\1\u015d\5\10\4\0\1\10"+
    "\10\0\1\10\13\0\5\10\6\0\6\10\4\0\3\10"+
    "\1\u015e\24\10\27\0\1\105\1\0\4\u015f\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\44\0\1\105\1\0\4\u0160\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\46\0\5\u0161\6\0\4\u0161\1\121\5\0"+
    "\6\u0161\4\0\1\121\21\0\1\10\10\0\1\10\13\0"+
    "\5\10\6\0\6\10\4\0\21\10\1\u0162\6\10\27\0"+
    "\1\105\1\0\4\u0163\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\44\0"+
    "\1\105\1\0\4\u0164\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\46\0"+
    "\5\u0165\6\0\4\u0165\1\121\5\0\6\u0165\4\0\1\121"+
    "\44\0\1\105\1\0\4\u0166\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\44\0\1\105\1\0\4\u0167\1\115\7\0\1\116\1\117"+
    "\1\120\1\121\10\0\1\116\1\117\1\120\4\0\1\121"+
    "\46\0\5\u0168\6\0\4\u0168\1\121\5\0\6\u0168\4\0"+
    "\1\121\44\0\1\105\1\0\4\u0169\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\44\0\1\105\1\0\4\u016a\1\115\7\0\1\116"+
    "\1\117\1\120\1\121\10\0\1\116\1\117\1\120\4\0"+
    "\1\121\46\0\5\u016b\6\0\4\u016b\1\121\5\0\6\u016b"+
    "\4\0\1\121\44\0\1\105\1\0\4\u016c\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\44\0\1\105\1\0\4\u016d\1\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\46\0\5\u016e\6\0\4\u016e\1\121\5\0"+
    "\6\u016e\4\0\1\121\44\0\1\105\1\0\4\u016f\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\44\0\1\105\1\0\4\u0170\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\46\0\5\u0171\6\0\4\u0171\1\121"+
    "\5\0\6\u0171\4\0\1\121\44\0\1\105\1\0\4\u0172"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\44\0\1\105\1\0\4\u0173"+
    "\1\115\7\0\1\116\1\117\1\120\1\121\10\0\1\116"+
    "\1\117\1\120\4\0\1\121\46\0\5\u0174\6\0\4\u0174"+
    "\1\121\5\0\6\u0174\4\0\1\121\44\0\1\105\1\0"+
    "\4\u0175\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\44\0\1\105\1\0"+
    "\4\u0176\1\115\7\0\1\116\1\117\1\120\1\121\10\0"+
    "\1\116\1\117\1\120\4\0\1\121\46\0\5\u0177\6\0"+
    "\4\u0177\1\121\5\0\6\u0177\4\0\1\121\44\0\1\105"+
    "\1\0\4\u0178\1\115\7\0\1\116\1\117\1\120\1\121"+
    "\10\0\1\116\1\117\1\120\4\0\1\121\46\0\5\u0179"+
    "\6\0\4\u0179\1\121\5\0\6\u0179\4\0\1\121\44\0"+
    "\1\105\1\0\4\u017a\1\115\7\0\1\116\1\117\1\120"+
    "\1\121\10\0\1\116\1\117\1\120\4\0\1\121\65\0"+
    "\1\121\17\0\1\121\44\0\1\105\1\0\4\u017b\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\44\0\1\105\1\0\4\u017c\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\44\0\1\105\1\0\4\u017d\1\115"+
    "\7\0\1\116\1\117\1\120\1\121\10\0\1\116\1\117"+
    "\1\120\4\0\1\121\44\0\1\105\1\0\5\115\7\0"+
    "\1\116\1\117\1\120\1\121\10\0\1\116\1\117\1\120"+
    "\4\0\1\121\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19810];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\3\11\21\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\1\1\11\1\0\3\11\1\0\1\11\1\1\1\0"+
    "\5\11\1\1\1\0\1\1\1\11\5\1\1\11\1\0"+
    "\2\11\1\0\1\11\1\1\3\11\1\1\1\11\53\1"+
    "\2\11\1\0\1\11\3\0\1\1\1\0\1\11\3\1"+
    "\1\0\3\1\2\11\61\1\2\0\1\1\1\0\3\1"+
    "\1\11\56\1\2\0\44\1\2\0\34\1\1\11\41\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public static String curLine = "";
  public static int lineCount = 0;	
  public static boolean debug = false;
  public static int incrspaces = 0;

  public void addToLine(String s, int line) {
    if (line != lineCount) 
      curLine = s;
    else
      curLine = curLine + s;
    lineCount = line;
  }

  public void addLineComment() {
    String line = "Comment, line " + (yyline+1) + " [" + (yycolumn+1+incrspaces)  + ":" + (yycolumn+yylength()) + "]";
    String str = yytext();
    Token t = null;
    if (str.startsWith("/*"))
      t = new Token(Types.INSTANCE.MULTILINE_COMMENT, "Multi-line " + line, yyline+1, yycolumn+1, yycolumn + yylength());
    else
      t = new Token(Types.INSTANCE.SINGLELINE_COMMENT, "Single-line " + line, yyline+1, yycolumn+1, yycolumn + yylength());
  }

  public void countSpaces(int line) {
    incrspaces = line;
  }

  private java_cup.runtime.Symbol token(int kind) {
    Token t;
    addToLine(yytext(), yyline+1);
    t = new Token(kind, yytext(), yyline+1, yycolumn+1, yycolumn + yylength());
    if (debug)
      System.out.println(t);
    //System.out.println(">> " + new java_cup.runtime.Symbol(kind, t).value);
    return new java_cup.runtime.Symbol(kind, t);
  } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 121: break;
          case 2:
            { addToLine(yytext(), yyline+1); countSpaces(yycolumn+1);
	//if (yytext().equals("\t")) yycolumn += 6; System.out.println(":::'" + yytext()+"'");
            }
            // fall through
          case 122: break;
          case 3:
            { return token(sym.NOT);
            }
            // fall through
          case 123: break;
          case 4:
            { return token(sym.IDENTIFIER);
            }
            // fall through
          case 124: break;
          case 5:
            { return token(sym.MOD);
            }
            // fall through
          case 125: break;
          case 6:
            { return token(sym.AND);
            }
            // fall through
          case 126: break;
          case 7:
            { return token(sym.LPAREN);
            }
            // fall through
          case 127: break;
          case 8:
            { return token(sym.RPAREN);
            }
            // fall through
          case 128: break;
          case 9:
            { return token(sym.MULT);
            }
            // fall through
          case 129: break;
          case 10:
            { return token(sym.PLUS);
            }
            // fall through
          case 130: break;
          case 11:
            { return token(sym.COMMA);
            }
            // fall through
          case 131: break;
          case 12:
            { return token(sym.MINUS);
            }
            // fall through
          case 132: break;
          case 13:
            { return token(sym.DOT);
            }
            // fall through
          case 133: break;
          case 14:
            { return token(sym.DIV);
            }
            // fall through
          case 134: break;
          case 15:
            { return token(sym.INTEGER_LITERAL);
            }
            // fall through
          case 135: break;
          case 16:
            { return token(sym.COLON);
            }
            // fall through
          case 136: break;
          case 17:
            { return token(sym.SEMICOLON);
            }
            // fall through
          case 137: break;
          case 18:
            { return token(sym.LT);
            }
            // fall through
          case 138: break;
          case 19:
            { return token(sym.EQ);
            }
            // fall through
          case 139: break;
          case 20:
            { return token(sym.GT);
            }
            // fall through
          case 140: break;
          case 21:
            { return token(sym.QUEST);
            }
            // fall through
          case 141: break;
          case 22:
            { return token(sym.LBRACK);
            }
            // fall through
          case 142: break;
          case 23:
            { return token(sym.RBRACK);
            }
            // fall through
          case 143: break;
          case 24:
            { return token(sym.XOR);
            }
            // fall through
          case 144: break;
          case 25:
            { return token(sym.LBRACE);
            }
            // fall through
          case 145: break;
          case 26:
            { return token(sym.OR);
            }
            // fall through
          case 146: break;
          case 27:
            { return token(sym.RBRACE);
            }
            // fall through
          case 147: break;
          case 28:
            { return token(sym.COMP);
            }
            // fall through
          case 148: break;
          case 29:
            { return token(sym.NOTEQ);
            }
            // fall through
          case 149: break;
          case 30:
            { throw new RuntimeException("Unterminated string at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 150: break;
          case 31:
            { return token(sym.STRING_LITERAL);
            }
            // fall through
          case 151: break;
          case 32:
            { return token(sym.MODEQ);
            }
            // fall through
          case 152: break;
          case 33:
            { return token(sym.ANDAND);
            }
            // fall through
          case 153: break;
          case 34:
            { return token(sym.ANDEQ);
            }
            // fall through
          case 154: break;
          case 35:
            { throw new RuntimeException("Unterminated character at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 155: break;
          case 36:
            { return token(sym.MULTEQ);
            }
            // fall through
          case 156: break;
          case 37:
            { return token(sym.PLUSPLUS);
            }
            // fall through
          case 157: break;
          case 38:
            { return token(sym.PLUSEQ);
            }
            // fall through
          case 158: break;
          case 39:
            { return token(sym.MINUSMINUS);
            }
            // fall through
          case 159: break;
          case 40:
            { return token(sym.MINUSEQ);
            }
            // fall through
          case 160: break;
          case 41:
            { return token(sym.DOUBLE_LITERAL);
            }
            // fall through
          case 161: break;
          case 42:
            { addToLine(yytext(), yyline+1); addLineComment();
            }
            // fall through
          case 162: break;
          case 43:
            { return token(sym.DIVEQ);
            }
            // fall through
          case 163: break;
          case 44:
            { return token(sym.FLOAT_LITERAL);
            }
            // fall through
          case 164: break;
          case 45:
            { return token(sym.LONG_LITERAL);
            }
            // fall through
          case 165: break;
          case 46:
            { return token(sym.COLONCOLON);
            }
            // fall through
          case 166: break;
          case 47:
            { return token(sym.LSHIFT);
            }
            // fall through
          case 167: break;
          case 48:
            { return token(sym.LTEQ);
            }
            // fall through
          case 168: break;
          case 49:
            { return token(sym.EQEQ);
            }
            // fall through
          case 169: break;
          case 50:
            { return token(sym.GTEQ);
            }
            // fall through
          case 170: break;
          case 51:
            { return token(sym.RSHIFT);
            }
            // fall through
          case 171: break;
          case 52:
            { return token(sym.XOREQ);
            }
            // fall through
          case 172: break;
          case 53:
            { return token(sym.DO);
            }
            // fall through
          case 173: break;
          case 54:
            { return token(sym.IF);
            }
            // fall through
          case 174: break;
          case 55:
            { return token(sym.IS);
            }
            // fall through
          case 175: break;
          case 56:
            { return token(sym.OREQ);
            }
            // fall through
          case 176: break;
          case 57:
            { return token(sym.OROR);
            }
            // fall through
          case 177: break;
          case 58:
            { return token(sym.CHARACTER_LITERAL);
            }
            // fall through
          case 178: break;
          case 59:
            { throw new RuntimeException("Unterminated comment at EOF at line "+(yyline+1)+", column "+(yycolumn+1));
            }
            // fall through
          case 179: break;
          case 60:
            { return token(sym.LSHIFTEQ);
            }
            // fall through
          case 180: break;
          case 61:
            { return token(sym.RSHIFTEQ);
            }
            // fall through
          case 181: break;
          case 62:
            { return token(sym.RRSHIFT);
            }
            // fall through
          case 182: break;
          case 63:
            { return token(sym.ALT);
            }
            // fall through
          case 183: break;
          case 64:
            { return token(sym.FOR);
            }
            // fall through
          case 184: break;
          case 65:
            { return token(sym.INT);
            }
            // fall through
          case 185: break;
          case 66:
            { return token(sym.NEW);
            }
            // fall through
          case 186: break;
          case 67:
            { return token(sym.PAR);
            }
            // fall through
          case 187: break;
          case 68:
            { return token(sym.PRI);
            }
            // fall through
          case 188: break;
          case 69:
            { return token(sym.SEQ);
            }
            // fall through
          case 189: break;
          case 70:
            { return token(sym.RRSHIFTEQ);
            }
            // fall through
          case 190: break;
          case 71:
            { return token(sym.BYTE);
            }
            // fall through
          case 191: break;
          case 72:
            { return token(sym.CASE);
            }
            // fall through
          case 192: break;
          case 73:
            { return token(sym.CHAN);
            }
            // fall through
          case 193: break;
          case 74:
            { return token(sym.CHAR);
            }
            // fall through
          case 194: break;
          case 75:
            { return token(sym.ELSE);
            }
            // fall through
          case 195: break;
          case 76:
            { return token(sym.FORK);
            }
            // fall through
          case 196: break;
          case 77:
            { return token(sym.LONG);
            }
            // fall through
          case 197: break;
          case 78:
            { return token(sym.NULL_LITERAL);
            }
            // fall through
          case 198: break;
          case 79:
            { return token(sym.PROC);
            }
            // fall through
          case 199: break;
          case 80:
            { return token(sym.READ);
            }
            // fall through
          case 200: break;
          case 81:
            { return token(sym.SKIP);
            }
            // fall through
          case 201: break;
          case 82:
            { return token(sym.STOP);
            }
            // fall through
          case 202: break;
          case 83:
            { return token(sym.SYNC);
            }
            // fall through
          case 203: break;
          case 84:
            { return token(sym.BOOLEAN_LITERAL);
            }
            // fall through
          case 204: break;
          case 85:
            { return token(sym.VOID);
            }
            // fall through
          case 205: break;
          case 86:
            { return token(sym.WITH);
            }
            // fall through
          case 206: break;
          case 87:
            { return token(sym.BREAK);
            }
            // fall through
          case 207: break;
          case 88:
            { return token(sym.CLAIM);
            }
            // fall through
          case 208: break;
          case 89:
            { return token(sym.CONST);
            }
            // fall through
          case 209: break;
          case 90:
            { return token(sym.FLOAT);
            }
            // fall through
          case 210: break;
          case 91:
            { return token(sym.SHORT);
            }
            // fall through
          case 211: break;
          case 92:
            { return token(sym.TIMER);
            }
            // fall through
          case 212: break;
          case 93:
            { return token(sym.WHILE);
            }
            // fall through
          case 213: break;
          case 94:
            { return token(sym.WRITE);
            }
            // fall through
          case 214: break;
          case 95:
            { return token(sym.DOUBLE);
            }
            // fall through
          case 215: break;
          case 96:
            { return token(sym.ENROLL);
            }
            // fall through
          case 216: break;
          case 97:
            { return token(sym.EXTERN);
            }
            // fall through
          case 217: break;
          case 98:
            { return token(sym.IMPORT);
            }
            // fall through
          case 218: break;
          case 99:
            { return token(sym.MOBILE);
            }
            // fall through
          case 219: break;
          case 100:
            { return token(sym.NATIVE);
            }
            // fall through
          case 220: break;
          case 101:
            { return token(sym.PUBLIC);
            }
            // fall through
          case 221: break;
          case 102:
            { return token(sym.RECORD);
            }
            // fall through
          case 222: break;
          case 103:
            { return token(sym.RESUME);
            }
            // fall through
          case 223: break;
          case 104:
            { return token(sym.RETURN);
            }
            // fall through
          case 224: break;
          case 105:
            { return token(sym.SHARED);
            }
            // fall through
          case 225: break;
          case 106:
            { return token(sym.STRING);
            }
            // fall through
          case 226: break;
          case 107:
            { return token(sym.SWITCH);
            }
            // fall through
          case 227: break;
          case 108:
            { return token(sym.PRAGMA);
            }
            // fall through
          case 228: break;
          case 109:
            { return token(sym.BARRIER);
            }
            // fall through
          case 229: break;
          case 110:
            { return token(sym.BOOLEAN);
            }
            // fall through
          case 230: break;
          case 111:
            { return token(sym.DEFAULT);
            }
            // fall through
          case 231: break;
          case 112:
            { return token(sym.EXTENDS);
            }
            // fall through
          case 232: break;
          case 113:
            { return token(sym.PACKAGE);
            }
            // fall through
          case 233: break;
          case 114:
            { return token(sym.PRIVATE);
            }
            // fall through
          case 234: break;
          case 115:
            { return token(sym.SUSPEND);
            }
            // fall through
          case 235: break;
          case 116:
            { return token(sym.TIMEOUT);
            }
            // fall through
          case 236: break;
          case 117:
            { return token(sym.CONTINUE);
            }
            // fall through
          case 237: break;
          case 118:
            { return token(sym.PROTOCOL);
            }
            // fall through
          case 238: break;
          case 119:
            { return token(sym.PROTECTED);
            }
            // fall through
          case 239: break;
          case 120:
            { return token(sym.IMPLEMENTS);
            }
            // fall through
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
