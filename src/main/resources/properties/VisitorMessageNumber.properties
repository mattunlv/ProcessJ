# Created by Ben
# 10/04/2018
#
# This file contains a list of error messages for the ProcessJ compiler

# ===========================================
# RESOLVE IMPORTS (100-199)
# ===========================================

RESOLVE_IMPORTS_100 = \
    No input file(s)

RESOLVE_IMPORTS_101 = \
    Cannot resolve '<arg0>' as local file or library

RESOLVE_IMPORTS_102 = \
    File not found: '<arg0>'

RESOLVE_IMPORTS_103 = \
    Package '<arg0>' does not exist

RESOLVE_IMPORTS_104 = \
    File '<arg0>' does not exists

RESOLVE_IMPORTS_105 = \
    File '<arg0>' not found in package '<arg1>'

RESOLVE_IMPORTS_106 = \
    Something went wrong while trying to parse '<arg0>'

# ===========================================
# TOP LEVEL DECLS (200-299)
# ===========================================

TOP_LEVEL_DECLS_200 = \
    Type with name '<arg0>' already declared in this scope

TOP_LEVEL_DECLS_201 = \
    Non-procedure type with name '<arg0>' already declared in this scope

TOP_LEVEL_DECLS_202 = \
    Type with name '<arg0>' already declared in this scope

TOP_LEVEL_DECLS_203 = \
    Type with name '<arg0>' already declared in this scope

TOP_LEVEL_DECLS_204 = \
    Something went wrong while trying to parser '<arg0>'

TOP_LEVEL_DECLS_205 = \
    Mobile procedure '<arg0>' must have a void return type

TOP_LEVEL_DECLS_206 = \
    Only one declaration of mobile procedure '<arg0>' may exists

TOP_LEVEL_DECLS_207 = \
    Type with name '<arg0>' already declared in this scope

TOP_LEVEL_DECLS_208 = \
    Non-mobile '<arg0>' already exists
    
# =======================================
# NAME TYPE RESOLUTION (300-399)
# =======================================

NAME_TYPE_RESOLUTION_300 = \
    Cannot resolve file '<arg0>' as a local file or library

# =======================================
# NAME CHECKER (400-499)
# =======================================

NAME_CHECKER_400 = \
    '<arg0>' already declared in this scope

NAME_CHECKER_401 = \
    Symbol '<arg0>' not found

NAME_CHECKER_402 = \
    '<arg0>' already declared in this scope

NAME_CHECKER_403 = \
    Procedure '<arg0>' not found

NAME_CHECKER_404 = \
    Cannot invoke non-procedure '<arg0>'

NAME_CHECKER_405 = \
    Symbol '<arg0>' not found

NAME_CHECKER_406 = \
    Symbol '<arg0>' not found

NAME_CHECKER_407 = \
    Symbol '<arg0>' is not a type

NAME_CHECKER_408 = \
    Symbol '<arg0>' not found

NAME_CHECKER_409 = \
    Symbol '<arg0>' not found

NAME_CHECKER_410 = \
    Symbol '<arg0>' not a procedure

NAME_CHECKER_411 = \
    Symbol '<arg0>' is not a protocol type
    
NAME_CHECKER_412 = \
    Symbol '<arg0>' is not a protocol type

NAME_CHECKER_413 = \
    Undefined protocol tag name '<arg0>' in literal of protocol type '<arg1>'
    
NAME_CHECKER_414 = \
    Symbol '<arg0>' not found
    
NAME_CHECKER_415 = \
    '<arg0>' cannot be extended as a protocol as it is not of protocol type

NAME_CHECKER_416 = \
    Symbol '<arg0>' not found

NAME_CHECKER_417 = \
    Symbol '<arg0>' is not a record type

NAME_CHECKER_418 = \
    Symbol '<arg0>' not found

NAME_CHECKER_419 = \
    '<arg0>' cannot be extended as a record as it is not of record type

NAME_CHECKER_420 = \
    '<arg0>' repeated in extends clause of record type '<arg1>'

NAME_CHECKER_421 = \
    Switch label must be constant or a protocol tag

# ======================================
# TYPE CHECKER (600-699)
# ======================================

TYPE_CHECKER_600 = \
    Cannot assign value of type '<arg0>' to variable of type '<arg1>'

TYPE_CHECKER_601 = \
    Cannot assign value of type '<arg0>' to variable of type '<arg1>'

TYPE_CHECKER_602 = \
    Right hand side operand of operator '<arg0>' must be of numeric type

TYPE_CHECKER_603 = \
    Left hand side operand of operator '<arg0>' must be of numeric type

TYPE_CHECKER_604 = \
    Left hand side operand of operator '<arg0>' must be of integral type

TYPE_CHECKER_605 = \
    Right hand side operand of operator '<arg0>' must be of integral type

TYPE_CHECKER_606 = \
    Both right and left-hand side operands of operator '<arg0>' must be of boolean or integral type

TYPE_CHECKER_607 = \
    Operator '<arg0>' requires operands of numeric type

TYPE_CHECKER_608 = \
    Void type cannot be used here

TYPE_CHECKER_609 = \
    Operator '<arg0>' requires operands of the same type

TYPE_CHECKER_610 = \
    Operator '<arg0>' requires operands of boolean type

TYPE_CHECKER_611 = \
    Operator '<arg0>' requires both operands of either integral or boolean type

TYPE_CHECKER_612 = \
    Operator '<arg0>' requires of numeric type or string/boolean, string/numeric, or string/string type

TYPE_CHECKER_613 = \
    Operator '<arg0>' requires left operand of integral type

TYPE_CHECKER_614 = \
    Operator '<arg0>' requires right operand of integral type

TYPE_CHECKER_615 = \
    Unknown Operator '<arg0>'

TYPE_CHECKER_616 = \
    Channel end expression requires channel type

TYPE_CHECKER_617 = \
    Unknown sharing status for channel and expression

TYPE_CHECKER_618 = \
    Channel or Time type required in channel/time read

TYPE_CHECKER_619 = \
    Timer read cannot have extended rendez-vous block

TYPE_CHECKER_620 = \
    Cannot write to a non-channel end

TYPE_CHECKER_621 = \
    Non boolean Expression found as test in do-statement

TYPE_CHECKER_622 = \
    Barrier type expected, found '<arg0>'

TYPE_CHECKER_623 = \
    Non-boolean expression found in for-statement

TYPE_CHECKER_624 = \
    Non-boolean expression found as test in if-statement

TYPE_CHECKER_625 = \
    Undefined named type '<arg0>'

TYPE_CHECKER_626 = \
    Unknown name expression

TYPE_CHECKER_627 = \
    Cannot assign value '<arg0>' to type '<arg1>'

TYPE_CHECKER_628 = \
    Incorrect number of expression in protocol literal '<arg0>'

TYPE_CHECKER_629 = \
    Cannot assign value of type '<arg0>' to protocol field '<arg1>' of type '<arg2>'

TYPE_CHECKER_630 = \
    Left hand side of assignment not assignable

TYPE_CHECKER_631 = \
    No suitable procedure found

TYPE_CHECKER_632 = \
    Found more than once candidate - cannot chose between them!

TYPE_CHECKER_633 = \
    Procedure return type is void; return statement cannot return a value

TYPE_CHECKER_634 = \
    Procedure return type is '<arg0>' but procedure return type is void

TYPE_CHECKER_635 = \
    Incompatible type in return statement

TYPE_CHECKER_636 = \
    Non-mobile procedure cannot suspend

TYPE_CHECKER_637 = \
    Switch labels must be of type int or protocol tag

TYPE_CHECKER_638 = \
    Switch labels must be constants

TYPE_CHECKER_639 = \
    Duplicate default label

TYPE_CHECKER_640 = \
    Duplicate case label

TYPE_CHECKER_641 = \
    Non-barrier type in sync statement

TYPE_CHECKER_642 = \
    Protocol tag '<arg0>' not found in protocol '<arg1>'

TYPE_CHECKER_643 = \
    Request for member '<arg0>' in something not a record or protocol type

TYPE_CHECKER_644 = \
    Switch statement expects value of type int or protocol tag

TYPE_CHECKER_645 = \
    Nested switch statements on the same protocol type is not allowed

TYPE_CHECKER_646 = \
    Fall-through cases in protocol switch statement not allowed

TYPE_CHECKER_647 = \
    Default case not allowed in protocol switch

TYPE_CHECKER_648 = \
    Switch label must be of integer type

TYPE_CHECKER_649 = \
    Switch label must be a protocol case name

TYPE_CHECKER_650 = \
    Fall-through cases in protocol switch statement not allowed

TYPE_CHECKER_651 = \
    Non-boolean Expression found as test in ternary expression

TYPE_CHECKER_652 = \
    Both branches of a ternary expression must be of assignment compatible types

TYPE_CHECKER_653 = \
    Both branches of a ternary expression must be of assignment compatible types

TYPE_CHECKER_654 = \
    Unknown field reference '<arg0>' in protocol tag '<arg1>' in protocol '<arg2>'

TYPE_CHECKER_655 = \
    Array access index must be of integral type

TYPE_CHECKER_656 = \
    Array literal with the keyword 'new'

TYPE_CHECKER_657 = \
    Array dimension must be of integral type

TYPE_CHECKER_658 = \
    Array initializer is not compatible with '<arg0>'

TYPE_CHECKER_659 = \
    Cannot assign non-array to array type '<arg0>'

# =======================================
# PARALLEL USAGE CHECKER (700-799)
# =======================================
    
PARALLEL_USAGE_CHECKER_700 = \
    Parallel read and write access to record member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_701 = \
    Parallel read and write access to array member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_702 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKER_703 = \
    Parallel write access to variable '<arg0>' illegal

PARALLEL_USAGE_CHECKER_704 = \
    Parallel write access to record member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_705 = \
    Parallel write access to array member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_706 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKER_707 = \
    Parallel read and write access to variable '<arg0>' illegal

PARALLEL_USAGE_CHECKER_708 = \
    Parallel write access to variable '<arg0>' illegal

PARALLEL_USAGE_CHECKER_709 = \
    Parallel write access to record member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_710 = \
    Parallel write access to array member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_711 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKER_712 = \
    Parallel write access to variable '<arg0>' illegal

PARALLEL_USAGE_CHECKER_713 = \
    Parallel write access to record member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_714 = \
    Parallel write access to array member '<arg0>' illegal

PARALLEL_USAGE_CHECKER_715 = \
    Parallel usage checking is not fully implemented for array access

# =====================================
# REACHABILITY (800-899)
# =====================================

REACHABILITY_800 = \
    Else-part of if-statement unreachable

REACHABILITY_801 = \
    Then-part of it-statement unreachable

REACHABILITY_802 = \
    While-statement is an infinite loop

REACHABILITY_803 = \
    Unreachable code following statement beginning on line <arg0>

REACHABILITY_804 = \
    Body of for-statement unreachable

REACHABILITY_805 = \
    For-statement is an infinite loop

REACHABILITY_806 = \
    Break statement outside loop or switch construct

REACHABILITY_807 = \
    Return-statement inside par-block is no legal

REACHABILITY_808 = \
    Break-statement inside par-block is no legal

REACHABILITY_809 = \
    Do-statement is an infinite loop

REACHABILITY_810 = \
    Body of while-statement unreachable

REACHABILITY_811 = \
    Continue-statement inside par-block is not legal

REACHABILITY_812 = \
    Continue-statement outside loop construct

REACHABILITY_813 = \
	Body of par-statement is empty

# =====================================
# SEMANTIC CHECKS (900-999)
# =====================================

SEMATIC_CHECKS_900 = \
    Cannot have channel read expressions inside literals
    
SEMATIC_CHECKS_901 = \
    Cannot have multiple loop control variables in a replicated alt

SEMATIC_CHECKS_902 = \
    Array access index cannot have side effects
    
SEMATIC_CHECKS_903 = \
	Illegal return statement in alt statement

# =====================================
# REWRITERS (1000-1020)
# =====================================

REWRITE_1000 = \
	Precondition in alt statement cannot contain channel reads
	
REWRITE_1001 = \
	Precondition in alt statement cannot contain a unary pre-increment

REWRITE_1002 = \
	Precondition in alt statement cannot contain a unary post-increment
	
REWRITE_1003 = \
	Precondition in alt statement cannot contain an invocation

REWRITE_1004 = \
	Multiple label values in switch case for protocol '<arg0>'
	
REWRITE_1005 = \
	Missing break statement in switch case for protocol '<arg0>'

REWRITE_1006 = \
	Cannot nest a pri alt inside a non-pri alt

