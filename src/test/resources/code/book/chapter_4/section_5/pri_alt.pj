/**
 * ProcessJ Book Code
 * Chapter 4
 * Section 5
 * Page 112
 */

import std.io;

public void replace(chan<int>.read in,
                    chan<int>.read inject,
                    chan<int>.write out) {

    while(true) {

        int x;
        pri alt {

            x = inject.read(): {

                par {

                    int any = in.read();
                    out.write(x);

                }

            }

            x = in.read(): out.write(x);

        }

    }

}

public void delta(chan<int>.read in, chan<int>.write outl, chan<int>.write out2) {

    while (true) {

        int x;
        x = in.read();

        par {

            outl.write(x);
            out2.write(x);

        }

    }

}

public void succ(chan<int>.read in, chan<int>.write out) {

    while (true) {

        int x;
        x = in.read();
        out.write(x + 1);
    }

}

public void id(chan<int>.read in, chan<int>.write out) {

    while (true) {

        int x;
        x = in.read();
        out.write(x);

    }

}

public void prefix(const int n, chan<int>.read in, chan<int>.write out) {

    out.write(n);
    id(in, out);

}

void count(const int period, chan<int>.read in,
                             chan<int>.write out) {

    timer tim;
    long when = tim.read() + period;
    int seen = 0;
    int any;

    while (true) {

        pri alt {

            tim.timeout(when): {

                out.write(seen);
                seen = 0;
                when = tim.read() + period;

            }

            any = in.read(): seen = seen + 1;

        }

    }

}

public void wait_reset(chan<int>.write reset) {


    while(true) {

        timer tim;

        tim.timeout(5000);

        reset.write(1);

    }

}

public void numbers_reset(chan<int>.write out,
                          chan<int>.read reset) {

    chan<int> a, b, c, d;

    par {

        prefix(0, d.read, a.write);
        replace(a.read, b.write, reset.read);
        delta(b.read, out, c.write);
        succ (c.read, d.write);

    }

}

public void read_number(chan<int>.read in) {

    while(true) {

        int x = in.read();

        println("Received: " + x);

    }

}

public void numbers_reset_serial(chan<int>.write out,
                                 chan<int>.read reset) {

    int n = 0;

    while (true) {

        pri alt {

            n = reset.read() : skip;
            skip : skip;

        }

        out.write(n);
        n = n + 1;

    }

}

public void main(string[] args) {

    chan<int> a, b, c;

    par {

        numbers_reset(a.write, b.read);
        wait_reset(b.write);
        read_number(a.read);

    }

}
