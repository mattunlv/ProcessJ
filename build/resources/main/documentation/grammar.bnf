source                  ::= compilation_unit?

compilation_unit        ::= pragma* package_declaration? import_declaration* type_declaration*

/// -------
/// Pragmas

pragma                  ::= '#pragma' identifier string_literal? ';'

string_literal          ::= 'regexp:"([^"\\]|\\.)*"'

package_declaration     ::= 'package' identifier {'.' identifier}* ';'

import_declaration      ::= 'import' identifier {'.' identifier}* {'.*'}? ';'

type_declaration        ::= procedure_type_declaration

procedure_type_declaration  ::= modifier* type identifier '(' ')' body

modifier                    ::=   'const'
                                | 'mobile'
                                | 'native'
                                | 'private'
                                | 'protected'
                                | 'public'

type ::=  primitive_type array_type
        | identifier array_type
        | channel_type array_type
        | channel_end_type array_type

array_type ::= {'[]' array_type}?

primitive_type          ::=   'boolean'
                            | 'char'
                            | 'byte'
                            | 'short'
                            | 'int'
                            | 'long'
                            | 'float'
                            | 'double'
                            | 'string'
                            | 'barrier'
                            | 'timer'

identifier              ::= 'regexp:\p{Alpha}\w*'

channel_type            ::= 'shared'? {'read' | 'write'}? 'chan<' type '>'
channel_end_type        ::= 'shared'? 'chan<' type '>.' {'read' | 'write'}

body                    ::= block | ';'

block                   ::= '{' block_statements? '}'



primary                        ::=    primary_no_new_array_or_mobile
                                    | array_creation_expression
                                    | mobile_creation
                                    | chan_read_expression
                                    | primary '::' identifier
                                    | identifier '::' identifier

primary_no_new_array_or_mobile ::=    literal
                                    | '(' expression ')'
                                    | record_access
                                    | invocation_expression
                                    | array_access

record_access                   ::=   primary '.' identifier
                                    | identifier '.' identifier

invocation_expression           ::=   'fork'     '(' argument_list_opt ')'
                                    | identifier '(' argument_list_opt ')'
                                    | primary '.' identifier '(' argument_list_opt ')'
                                    | primary '::' identifier '(' argument_list_opt ')'
                                    | identifier '::' identifier '(' argument_list_opt ')'
                                    | identifier '.' identifier '(' argument_list_opt ')'

array_access                    ::=   identifier '[' expression ']'
                                    | primary_no_new_array_or_mobile '[' expression ']'
