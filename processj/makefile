COMPILER:=g++
CPPFLAGS:=-Wall -Wextra -g -pedantic -pthread -std=c++17 -masm=intel#-fsanitize=address
OBJFLAGS:=-c -fPIC
TARGET:=cppruntime# Originally pj_runtime
NAMESPACE:=ProcessJ
ROOT:=src/$(TARGET)/
#RUNTIMEFLAGS:=-L$(ROOT)lib -l$(TARGET)
#java -cp .:bin:resources/jars/* ProcessJc -target CPLUS -include include tests/alttest.pj
# ----------
# Extensions

HPPCONST:=.hpp
CPPCONST:=.cpp
OBJCONST:=.o
GCHCONST:=.gch
AAACONST:=.a

ALLHPPCONST:=*$(HPPCONST)
ALLCPPCONST:=*$(CPPCONST)
ALLOBJCONST:=*$(OBJCONST)
ALLGCHCONST:=*$(PCHCONST)

# -----------
# Directories

BIN_DIR:=$(ROOT)bin
INCLUDE_DIR:=$(ROOT)include
SOURCE_DIR:=$(ROOT)src
LIB_DIR:=$(ROOT)lib
OBJ_DIR:=$(ROOT)obj
RUNTIME_DIR:=runtime
RUNTIME_TESTS_DIR:=runtimetest
UTILITIES:=utilities

TEST_DIR:=test

# ----------
# Root Paths

INCLUDEPATH:=-I$(INCLUDE_DIR)/
SOURCEPATH:=$(SOURCE_DIR)/
LIBRARYPATH:=$(LIB_DIR)/
OBJECTPATH:=$(OBJ_DIR)/

# -------------
# Include Paths

RUNTIME_INCLUDE_PATH:=$(INCLUDEPATH)$(RUNTIME_DIR)/
RUNTIME_TESTS_INCLUDE_PATH:=$(INCLUDEPATH)$(RUNTIME_TESTS_DIR)/
UTILITIES_INCLUDE_PATH:=$(INCLUDEPATH)$(UTILITIES)/

TEST_INCLUDE_PATH:=$(RUNTIME_TESTS_INCLUDE_PATH)$(TEST_DIR)/

# -----------
# Source Path

RUNTIME_SOURCE_PATH:=$(SOURCEPATH)$(RUNTIME_DIR)/
RUNTIME_TESTS_SOURCE_PATH:=$(SOURCEPATH)$(RUNTIME_TESTS_DIR)/
UTILITIES_SOURCE_PATH:=$(SOURCEPATH)$(UTILITIES)/

TEST_SOURCE_PATH:=$(RUNTIME_TESTS_SOURCE_PATH)$(TEST_DIR)/

# --------
# Includes

INCLUDES:=-Ilib/C++ $(INCLUDEPATH) $(RUNTIME_INCLUDE_PATH) $(RUNTIME_TESTS_INCLUDE_PATH) $(UTILITIES_INCLUDE_PATH)

TARGET_TEST_INCLUDES:=$(UTILITIES_INCLUDE_PATH) $(RUNTIME_INCLUDE_PATH) $(RUNTIME_TESTS_INCLUDE_PATH)
TARGET_TEST_INCLUDES+= $(TEST_INCLUDE_PATH)

# -------
# Sources

TARGET_TEST_SOURCES:=$(RUNTIME_TESTS_SOURCE_PATH)$(ALLCPPCONST) $(TEST_SOURCE_PATH)$(ALLCPPCONST)

# -------
# Targets

$(LIB_DIR)/$(TARGET)$(AAACONST):
	reset && clear
	@echo "Checking for lib directory."
	if [ ! -d "./$(ROOT)$(RUNTIME_DIR)/lib" ]; then mkdir -p $(ROOT)$(RUNTIME_DIR)/lib; fi
	if [ ! -d "./$(ROOT)$(RUNTIME_DIR)/obj" ]; then mkdir -p $(ROOT)$(RUNTIME_DIR)/obj; fi
	@echo "Creating objects."
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(RUNTIME_INCLUDE_PATH) $(OBJFLAGS) -o $(OBJECTPATH)$(TARGET)$(OBJCONST) $(RUNTIME_SOURCE_PATH)$(ALLCPPCONST)
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(OBJFLAGS) -o $(OBJECTPATH)$(TARGET)_utilities$(OBJCONST) $(UTILITIES_SOURCE_PATH)$(ALLCPPCONST)
	@echo "Creating library."
	#ar cvq $(OBJECTPATH)$(TARGET)$(OBJCONST) $(OBJECTPATH)$(TARGET)_utilities$(OBJCONST)
	#ranlib $(OBJECTPATH)$(TARGET)$(OBJCONST)
	#rm -f  $(OBJECTPATH)$(TARGET)_utilities$(OBJCONST)

test:
	reset && clear
	@echo "Creating Tests."
	$(COMPILER) $(CPPFLAGS) $(TARGET_TEST_INCLUDES) -o $(BIN_DIR)/$(RUNTIME_TESTS_DIR) $(TARGET_TEST_SOURCES) $(RUNTIMEFLAGS)

objects:
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(RUNTIME_INCLUDE_PATH) $(OBJFLAGS) -o $(OBJECTPATH)$(TARGET)$(OBJCONST) $(RUNTIME_SOURCE_PATH)$(ALLCPPCONST)
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(OBJFLAGS) -o $(OBJECTPATH)$(TARGET)_utilities$(OBJCONST) $(UTILITIES_SOURCE_PATH)$(ALLCPPCONST)

build:
	reset && clear
	@echo "Checking for lib directory."
	if [ ! -d "./$(ROOT)$(RUNTIME_DIR)/lib" ]; then mkdir -p $(ROOT)$(RUNTIME_DIR)/lib; fi
	if [ ! -d "./$(ROOT)$(RUNTIME_DIR)/obj" ]; then mkdir -p $(ROOT)$(RUNTIME_DIR)/obj; fi
	@echo "Creating objects."
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(RUNTIME_INCLUDE_PATH) $(OBJFLAGS) -o $(OBJECTPATH)$(TARGET)$(OBJCONST) $(RUNTIME_SOURCE_PATH)$(ALLCPPCONST)
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(OBJFLAGS) -o $(OBJECTPATH)$(TARGET)_utilities$(OBJCONST) $(UTILITIES_SOURCE_PATH)$(ALLCPPCONST)
	$(COMPILER) $(CPPFLAGS) $(UTILITIES_INCLUDE_PATH) $(RUNTIME_INCLUDE_PATH) -o $@ $< $(SOURCEPATH)$(ALLCPPCONST)

clean:
	clear
	@echo "Cleaning"
ifeq (,$(wildcard $(BIN_DIR)/$(TARGET).dSYM))
	rm -rf $(BIN_DIR)/$(TARGET).dSYM
endif
ifeq (,$(wildcard $(BIN_DIR)/$(TARGET).o))
	rm -rf $(LIB_DIR)/*
	rm -rf $(OBJECTPATH)$(TARGET)$(OBJCONST)
	rm -rf $(OBJECTPATH)$(TARGET)_utilities$(OBJCONST)
	rm -rf $(BIN_DIR)/$(TARGET)
	rm -rf $(BIN_DIR)/$(TARGET).o
endif

