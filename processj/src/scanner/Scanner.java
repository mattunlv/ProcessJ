/* The following code was generated by JFlex 1.2.2 on 3/13/22, 2:27 PM */

package scanner;

import ast.*;
import parser.*;
import syntax.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 3/13/22, 2:27 PM from the specification file
 * <tt>file:/home/cuenca/programming/java/ProcessJ/processj/src/scanner/ProcessJ.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2,  0,  3,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 64, 20, 47,  6, 57, 61, 21, 48, 49,  5, 58, 55, 19, 17,  4, 
     8, 14, 13, 13, 15, 15, 15, 15,  9,  9, 67, 54, 59, 56, 60, 66, 
     0, 12, 12, 12, 68, 18, 16,  6,  6,  6,  6,  6, 10,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6, 11,  6,  6, 52, 22, 53, 62,  6, 
     0, 30, 24, 39, 38, 29, 25, 37, 35, 36,  6, 43, 28, 42, 31, 27, 
    44, 45, 23, 34, 33, 26, 40, 41, 46, 32,  6, 50, 63, 51, 65,  7
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    69,   138,    69,   207,   276,   345,   414,   483,   552, 
      621,   690,   759,   828,   897,   966,  1035,  1104,  1173,  1242, 
     1311,  1380,  1449,  1518,  1587,  1656,  1725,  1794,  1863,  1932, 
       69,    69,    69,    69,    69,    69,    69,    69,  2001,  2070, 
     2139,  2208,  2277,  2346,  2415,  2484,  2553,    69,    69,  2622, 
     2691,  2760,    69,    69,  2829,  2898,    69,  2967,  3036,  3105, 
     3174,    69,  3243,  3312,    69,    69,    69,   690,  3381,    69, 
       69,  3450,  3519,    69,  3588,  3657,  3726,  3795,  3864,  3933, 
     4002,  4071,  4140,  4209,  4278,  4347,  4416,  4485,  4554,  4623, 
     4692,  4761,  4830,  4899,  4968,  5037,  5106,  5175,  5244,  5313, 
      345,  5382,   345,  5451,  5520,  5589,  5658,  5727,  5796,  5865, 
     5934,  6003,  6072,  6141,  6210,  6279,  6348,  6417,  6486,    69, 
       69,    69,    69,    69,  6555,    69,  6624,    69,    69,    69, 
       69,    69,    69,    69,  6693,    69,  6762,  6831,  6900,  6969, 
     7038,  7107,  7176,  7245,    69,  7314,  7383,  7452,  7521,  7590, 
     7659,  7728,  7797,  7866,  7935,  8004,  8073,  8142,  8211,  8280, 
     8349,  8418,  8487,   345,  8556,   345,  8625,  8694,  8763,  8832, 
      345,  8901,  8970,  9039,  9108,  9177,  9246,  9315,   345,  9384, 
     9453,  9522,  9591,  9660,  9729,  9798,  9867,  9936, 10005, 10074, 
    10143, 10212, 10281, 10350,   345, 10419, 10488,    69,    69, 10557, 
    10626, 10695, 10764, 10833, 10902, 10971,   345, 11040, 11109, 11178, 
    11247, 11316, 11385,   345,   345, 11454,   345,   345, 11523, 11592, 
      345, 11661,   345, 11730, 11799,   345, 11868,   345, 11937, 12006, 
    12075,   345, 12144, 12213, 12282, 12351, 12420, 12489, 12558,   345, 
      345,   345,   345, 12627, 12696,   345, 12765, 12834,   345, 12903, 
    12972, 13041, 13110,    69, 13179, 13248, 13317, 13386, 13455, 13524, 
    13593,   345, 13662, 13731,   345, 13800, 13869, 13938, 14007,   345, 
    14076, 14145, 14214,   345, 14283, 14352, 14421, 14490, 14559, 14628, 
    14697,   345,   345,   345,   345, 14766, 14835, 14904, 14973, 15042, 
    15111, 15180, 15249, 15318, 15387, 15456,   345,   345,   345, 15525, 
    15594,   345,   345, 15663,   345, 15732, 15801,   345,   345,   345, 
      345, 15870,   345, 15939, 16008,   345, 16077, 16146, 16215,   345, 
    16284, 16353, 16422, 16491, 16560,   345,   345,   345,   345,   345, 
    16629,   345, 16698, 16767, 16836,   345,   345,    69, 16905, 16974, 
    17043, 17112,   345,   345, 17181, 17250, 17319, 17388, 17457,   345, 
    17526, 17595, 17664,   345, 17733, 17802, 17871, 17940, 18009, 18078, 
    18147, 18216, 18285, 18354, 18423, 18492, 18561, 18630, 18699, 18768, 
    18837, 18906, 18975, 19044, 19044, 19113, 19182, 19251, 19320, 19389, 
    19458
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\3\7\3\11\1\7\1\12\1\7\1\13\1\14"+
    "\1\15\1\2\1\16\1\17\1\20\2\7\1\21\1\22"+
    "\1\23\1\24\1\7\1\25\1\26\1\7\1\27\1\7"+
    "\1\30\1\31\1\32\1\33\1\34\1\7\1\35\2\7"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\7\107\0\1\4"+
    "\106\0\1\63\1\64\62\0\1\65\104\0\1\66\22\0"+
    "\13\7\1\0\1\7\4\0\30\7\25\0\1\7\10\0"+
    "\1\67\1\70\1\71\1\72\1\0\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\6\0\1\76\2\0\1\71\1\100"+
    "\10\0\1\101\7\0\1\72\25\0\1\101\10\0\2\11"+
    "\1\71\2\0\3\11\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\77\3\0\3\77\110\0\1\102\44\0\1\103\14\0"+
    "\1\104\1\105\1\106\21\104\1\107\1\104\1\0\56\104"+
    "\1\110\1\111\1\112\22\110\1\0\1\113\56\110\6\0"+
    "\13\7\1\0\1\7\4\0\6\7\1\114\21\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\1\115\3\7"+
    "\1\116\2\7\1\117\1\7\1\120\16\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\4\7\1\121\1\122"+
    "\1\7\1\123\20\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\4\7\1\124\23\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\5\7\1\125\2\7\1\126"+
    "\16\7\1\127\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\5\7\1\130\22\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\3\7\1\131\2\7\1\132\1\133"+
    "\20\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\1\134\14\7\1\135\12\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\3\7\1\136\2\7\1\137\2\7"+
    "\1\140\1\141\1\7\1\142\5\7\1\143\1\7\1\144"+
    "\3\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\2\7\1\145\5\7\1\146\2\7\1\147\7\7\1\150"+
    "\4\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\4\7\1\151\1\7\1\152\21\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\4\7\1\153\1\154\1\7"+
    "\1\155\4\7\1\156\13\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\4\7\1\157\23\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\1\160\13\7\1\161"+
    "\1\162\12\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\4\7\1\163\23\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\1\164\2\7\1\165\3\7\1\166"+
    "\20\7\25\0\1\7\54\0\1\167\120\0\1\170\104\0"+
    "\1\171\104\0\1\172\1\0\1\173\102\0\1\174\2\0"+
    "\1\175\101\0\1\176\3\0\1\177\100\0\1\200\4\0"+
    "\1\201\77\0\1\202\104\0\1\203\6\0\1\204\75\0"+
    "\1\205\117\0\1\206\1\0\1\63\1\207\1\210\102\63"+
    "\5\211\1\212\77\211\10\0\1\67\1\70\1\71\2\0"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\70\3\0\3\70\1\76\1\77\1\100\6\0\1\76"+
    "\3\0\1\100\10\0\1\101\35\0\1\101\10\0\1\213"+
    "\1\214\2\0\5\214\1\0\1\214\5\0\2\214\3\0"+
    "\2\214\7\0\2\214\34\0\1\214\10\0\1\215\1\70"+
    "\1\71\2\0\3\215\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\1\75\1\70\1\71\2\0\3\75\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\10\0\1\216\1\70\1\71\2\0\3\216\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\2\77\3\0\3\77\1\76"+
    "\1\0\1\100\6\0\1\76\3\0\1\100\10\0\1\101"+
    "\35\0\1\101\10\0\2\217\3\0\3\217\3\0\1\220"+
    "\46\0\1\220\14\0\1\106\103\0\1\111\1\112\22\0"+
    "\1\221\61\0\1\112\112\0\1\222\4\0\2\222\1\223"+
    "\4\0\6\110\1\224\4\0\1\110\1\0\1\110\51\0"+
    "\13\7\1\0\1\7\4\0\7\7\1\225\2\7\1\226"+
    "\1\227\4\7\1\230\7\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\6\7\1\231\21\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\4\7\1\232\23\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\1\233"+
    "\27\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\12\7\1\234\15\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\1\235\27\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\4\7\1\236\23\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\5\7\1\237\22\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\10\7"+
    "\1\240\17\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\13\7\1\241\14\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\1\242\27\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\12\7\1\243\15\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\12\7\1\244"+
    "\15\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\5\7\1\245\22\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\22\7\1\246\5\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\12\7\1\247\15\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\3\7\1\250"+
    "\24\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\23\7\1\251\4\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\13\7\1\252\14\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\26\7\1\253\1\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\10\7\1\254"+
    "\17\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\1\255\3\7\1\256\23\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\4\7\1\257\2\7\1\260\20\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\15\7"+
    "\1\261\12\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\15\7\1\262\12\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\12\7\1\263\15\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\25\7\1\264\2\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\3\7"+
    "\1\265\24\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\2\7\1\266\25\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\10\7\1\267\17\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\7\7\1\270\20\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\13\7"+
    "\1\271\14\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\7\7\1\272\20\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\15\7\1\273\12\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\15\7\1\274\12\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\15\7"+
    "\1\275\12\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\12\7\1\276\15\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\1\7\1\277\26\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\4\7\1\300\10\7"+
    "\1\301\12\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\1\7\1\302\26\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\1\303\17\7\1\304\7\7\25\0"+
    "\1\7\27\0\1\305\145\0\1\306\104\0\1\307\3\0"+
    "\1\310\12\0\1\210\102\0\5\211\1\311\77\211\5\212"+
    "\1\312\77\212\10\0\1\213\1\214\1\71\1\0\5\214"+
    "\1\0\1\214\5\0\2\214\2\0\1\71\2\214\7\0"+
    "\2\214\34\0\1\214\10\0\2\313\1\71\1\0\5\313"+
    "\1\0\1\313\5\0\2\313\2\0\1\71\2\313\7\0"+
    "\2\313\34\0\1\313\10\0\1\314\1\70\1\71\2\0"+
    "\3\314\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\10\0\1\315\1\70"+
    "\1\71\2\0\3\315\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\217\3\0\3\217\1\76\10\0\1\76\14\0\1\101"+
    "\35\0\1\101\10\0\2\217\3\0\3\217\66\0\1\111"+
    "\1\112\5\0\1\223\4\0\3\223\5\0\1\221\60\0"+
    "\1\111\1\112\5\0\1\110\4\0\3\110\5\0\1\221"+
    "\67\0\2\316\2\0\5\316\1\0\1\316\5\0\2\316"+
    "\3\0\2\316\7\0\2\316\34\0\1\316\6\0\13\7"+
    "\1\0\1\7\4\0\17\7\1\317\10\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\3\7\1\320\24\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\3\7"+
    "\1\321\24\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\4\7\1\322\23\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\7\7\1\323\20\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\5\7\1\324\22\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\1\325"+
    "\27\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\6\7\1\326\21\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\24\7\1\327\3\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\7\7\1\330\20\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\13\7\1\250"+
    "\14\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\16\7\1\331\11\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\6\7\1\332\21\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\4\7\1\333\23\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\6\7\1\334"+
    "\21\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\5\7\1\335\22\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\15\7\1\336\12\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\6\7\1\337\21\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\6\7\1\340"+
    "\21\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\25\7\1\341\2\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\20\7\1\342\7\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\15\7\1\343\12\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\25\7\1\344"+
    "\2\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\1\345\27\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\1\346\27\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\12\7\1\347\15\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\25\7\1\350\2\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\4\7\1\351"+
    "\1\352\22\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\1\7\1\353\26\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\7\7\1\354\20\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\12\7\1\355\1\356"+
    "\14\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\15\7\1\357\12\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\6\7\1\360\21\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\1\361\7\7\1\362\17\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\17\7"+
    "\1\363\10\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\12\7\1\364\15\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\5\7\1\365\22\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\14\7\1\366\13\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\15\7"+
    "\1\367\12\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\12\7\1\370\5\7\1\371\7\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\21\7\1\372\6\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\5\7"+
    "\1\373\22\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\24\7\1\374\3\7\25\0\1\7\36\0\1\375"+
    "\136\0\1\376\14\0\4\211\1\210\1\311\77\211\4\212"+
    "\1\210\1\312\77\212\10\0\2\377\1\71\1\0\5\377"+
    "\1\0\1\377\5\0\2\377\2\0\1\71\2\377\7\0"+
    "\2\377\34\0\1\377\10\0\1\u0100\1\70\1\71\2\0"+
    "\3\u0100\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\10\0\1\u0101\1\70"+
    "\1\71\2\0\3\u0101\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\u0102\2\0\5\u0102\1\0\1\u0102\5\0\2\u0102\3\0"+
    "\2\u0102\7\0\2\u0102\34\0\1\u0102\6\0\13\7\1\0"+
    "\1\7\4\0\1\u0103\27\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\23\7\1\u0104\4\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\1\u0105\27\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\24\7\1\u0106"+
    "\3\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\6\7\1\u0107\21\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\15\7\1\u0108\12\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\12\7\1\u0109\15\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\5\7\1\u010a"+
    "\22\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\1\u010b\7\7\1\u010c\17\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\21\7\1\u010d\6\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\1\u010e\3\7\1\u010f"+
    "\23\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\6\7\1\u0110\21\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\10\7\1\u0111\17\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\12\7\1\u0112\15\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\6\7\1\u0113"+
    "\21\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\20\7\1\u0114\7\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\1\u0115\27\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\6\7\1\u0116\21\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\5\7\1\u0117\22\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\3\7"+
    "\1\u0118\24\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\15\7\1\u0119\12\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\12\7\1\u011a\15\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\23\7\1\u011b\4\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\6\7"+
    "\1\u011c\21\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\6\7\1\u011d\21\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\5\7\1\u011e\22\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\4\7\1\u011f\1\7"+
    "\1\u0120\21\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\7\7\1\u0121\20\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\15\7\1\u0122\12\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\7\7\1\u0123\20\7"+
    "\25\0\1\7\45\0\1\u0124\47\0\2\u0125\1\71\1\0"+
    "\5\u0125\1\0\1\u0125\5\0\2\u0125\2\0\1\71\2\u0125"+
    "\7\0\2\u0125\34\0\1\u0125\10\0\1\u0126\1\70\1\71"+
    "\2\0\3\u0126\1\76\1\77\1\100\6\0\1\76\2\0"+
    "\1\71\1\100\10\0\1\101\35\0\1\101\10\0\1\u0127"+
    "\1\70\1\71\2\0\3\u0127\1\76\1\77\1\100\6\0"+
    "\1\76\2\0\1\71\1\100\10\0\1\101\35\0\1\101"+
    "\10\0\2\u0128\2\0\5\u0128\1\0\1\u0128\5\0\2\u0128"+
    "\3\0\2\u0128\7\0\2\u0128\34\0\1\u0128\6\0\13\7"+
    "\1\0\1\7\4\0\10\7\1\u0129\17\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\6\7\1\u012a\21\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\17\7"+
    "\1\u012b\10\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\7\7\1\u012c\20\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\6\7\1\u012d\21\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\5\7\1\u012e\22\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\10\7"+
    "\1\u012f\17\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\17\7\1\u0130\10\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\6\7\1\u0131\21\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\3\7\1\u0132\24\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\10\7"+
    "\1\u0133\17\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\16\7\1\u0134\11\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\17\7\1\u0135\10\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\14\7\1\u0136\13\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\12\7"+
    "\1\u0137\15\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\23\7\1\u0138\4\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\6\7\1\u0139\21\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\5\7\1\u013a\22\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\10\7"+
    "\1\u013b\17\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\6\7\1\u013c\21\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\20\7\1\u013d\7\7\25\0\1\7"+
    "\6\0\13\7\1\0\1\7\4\0\20\7\1\u013e\7\7"+
    "\25\0\1\7\6\0\13\7\1\0\1\7\4\0\12\7"+
    "\1\u013f\15\7\25\0\1\7\6\0\13\7\1\0\1\7"+
    "\4\0\20\7\1\u0140\7\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\16\7\1\u0141\11\7\25\0\1\7"+
    "\52\0\1\u0142\42\0\2\u0143\1\71\1\0\5\u0143\1\0"+
    "\1\u0143\5\0\2\u0143\2\0\1\71\2\u0143\7\0\2\u0143"+
    "\34\0\1\u0143\10\0\1\u0144\1\70\1\71\2\0\3\u0144"+
    "\1\76\1\77\1\100\6\0\1\76\2\0\1\71\1\100"+
    "\10\0\1\101\35\0\1\101\10\0\1\u0145\1\70\1\71"+
    "\2\0\3\u0145\1\76\1\77\1\100\6\0\1\76\2\0"+
    "\1\71\1\100\10\0\1\101\35\0\1\101\10\0\2\110"+
    "\2\0\5\110\1\0\1\110\5\0\2\110\3\0\2\110"+
    "\7\0\2\110\34\0\1\110\6\0\13\7\1\0\1\7"+
    "\4\0\10\7\1\u0146\17\7\25\0\1\7\6\0\13\7"+
    "\1\0\1\7\4\0\1\u0147\27\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\13\7\1\u0148\14\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\12\7\1\u0149"+
    "\15\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\17\7\1\u014a\10\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\6\7\1\u014b\21\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\12\7\1\u014c\15\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\3\7\1\u014d"+
    "\24\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\4\7\1\u014e\23\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\12\7\1\u014f\15\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\6\7\1\u0150\21\7\25\0"+
    "\1\7\6\0\13\7\1\0\1\7\4\0\6\7\1\u0151"+
    "\21\7\25\0\1\7\36\0\1\u0152\56\0\2\u0153\1\71"+
    "\1\0\5\u0153\1\0\1\u0153\5\0\2\u0153\2\0\1\71"+
    "\2\u0153\7\0\2\u0153\34\0\1\u0153\10\0\1\u0154\1\70"+
    "\1\71\2\0\3\u0154\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\1\u0155\1\70\1\71\2\0\3\u0155\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\6\0\13\7\1\0\1\7\4\0\10\7\1\u0156"+
    "\17\7\25\0\1\7\6\0\13\7\1\0\1\7\4\0"+
    "\6\7\1\u0157\21\7\25\0\1\7\6\0\13\7\1\0"+
    "\1\7\4\0\5\7\1\u0158\22\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\6\7\1\u0159\21\7\25\0"+
    "\1\7\10\0\2\u015a\1\71\1\0\5\u015a\1\0\1\u015a"+
    "\5\0\2\u015a\2\0\1\71\2\u015a\7\0\2\u015a\34\0"+
    "\1\u015a\10\0\1\u015b\1\70\1\71\2\0\3\u015b\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\1\u015c\1\70\1\71\2\0"+
    "\3\u015c\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\6\0\13\7\1\0"+
    "\1\7\4\0\12\7\1\u015d\15\7\25\0\1\7\6\0"+
    "\13\7\1\0\1\7\4\0\17\7\1\u015e\10\7\25\0"+
    "\1\7\10\0\2\u015f\1\71\1\0\5\u015f\1\0\1\u015f"+
    "\5\0\2\u015f\2\0\1\71\2\u015f\7\0\2\u015f\34\0"+
    "\1\u015f\10\0\1\u0160\1\70\1\71\2\0\3\u0160\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\1\u0161\1\70\1\71\2\0"+
    "\3\u0161\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\6\0\13\7\1\0"+
    "\1\7\4\0\13\7\1\u0162\14\7\25\0\1\7\10\0"+
    "\2\u0163\1\71\1\0\5\u0163\1\0\1\u0163\5\0\2\u0163"+
    "\2\0\1\71\2\u0163\7\0\2\u0163\34\0\1\u0163\10\0"+
    "\1\u0164\1\70\1\71\2\0\3\u0164\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\10\0\1\u0165\1\70\1\71\2\0\3\u0165\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\2\u0166\1\71\1\0\5\u0166"+
    "\1\0\1\u0166\5\0\2\u0166\2\0\1\71\2\u0166\7\0"+
    "\2\u0166\34\0\1\u0166\10\0\1\u0167\1\70\1\71\2\0"+
    "\3\u0167\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\10\0\1\u0168\1\70"+
    "\1\71\2\0\3\u0168\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\u0169\1\71\1\0\5\u0169\1\0\1\u0169\5\0\2\u0169"+
    "\2\0\1\71\2\u0169\7\0\2\u0169\34\0\1\u0169\10\0"+
    "\1\u016a\1\70\1\71\2\0\3\u016a\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\10\0\1\u016b\1\70\1\71\2\0\3\u016b\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\2\u016c\1\71\1\0\5\u016c"+
    "\1\0\1\u016c\5\0\2\u016c\2\0\1\71\2\u016c\7\0"+
    "\2\u016c\34\0\1\u016c\10\0\1\u016d\1\70\1\71\2\0"+
    "\3\u016d\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\10\0\1\u016e\1\70"+
    "\1\71\2\0\3\u016e\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\u016f\1\71\1\0\5\u016f\1\0\1\u016f\5\0\2\u016f"+
    "\2\0\1\71\2\u016f\7\0\2\u016f\34\0\1\u016f\10\0"+
    "\1\u0170\1\70\1\71\2\0\3\u0170\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\10\0\1\u0171\1\70\1\71\2\0\3\u0171\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\2\u0172\1\71\1\0\5\u0172"+
    "\1\0\1\u0172\5\0\2\u0172\2\0\1\71\2\u0172\7\0"+
    "\2\u0172\34\0\1\u0172\10\0\1\u0173\1\70\1\71\2\0"+
    "\3\u0173\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\10\0\1\u0174\1\70"+
    "\1\71\2\0\3\u0174\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\2\u0175\1\71\1\0\5\u0175\1\0\1\u0175\5\0\2\u0175"+
    "\2\0\1\71\2\u0175\7\0\2\u0175\34\0\1\u0175\10\0"+
    "\1\u0176\1\70\1\71\2\0\3\u0176\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\10\0\1\u0177\1\70\1\71\2\0\3\u0177\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\2\u0178\1\71\1\0\5\u0178"+
    "\1\0\1\u0178\5\0\2\u0178\2\0\1\71\2\u0178\7\0"+
    "\2\u0178\34\0\1\u0178\10\0\1\u0179\1\70\1\71\2\0"+
    "\3\u0179\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\12\0\1\71\21\0"+
    "\1\71\60\0\1\u017a\1\70\1\71\2\0\3\u017a\1\76"+
    "\1\77\1\100\6\0\1\76\2\0\1\71\1\100\10\0"+
    "\1\101\35\0\1\101\10\0\1\u017b\1\70\1\71\2\0"+
    "\3\u017b\1\76\1\77\1\100\6\0\1\76\2\0\1\71"+
    "\1\100\10\0\1\101\35\0\1\101\10\0\1\u017c\1\70"+
    "\1\71\2\0\3\u017c\1\76\1\77\1\100\6\0\1\76"+
    "\2\0\1\71\1\100\10\0\1\101\35\0\1\101\10\0"+
    "\1\u017d\1\70\1\71\2\0\3\u017d\1\76\1\77\1\100"+
    "\6\0\1\76\2\0\1\71\1\100\10\0\1\101\35\0"+
    "\1\101\10\0\2\70\1\71\2\0\3\70\1\76\1\77"+
    "\1\100\6\0\1\76\2\0\1\71\1\100\10\0\1\101"+
    "\35\0\1\101";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     9,  9,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  1,  1,  0,  9,  9,  1,  1,  9,  0,  1,  1,  1,  9,  1,  0, 
     9,  9,  9,  0,  1,  9,  9,  0,  1,  9,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  9,  9,  9,  9,  9,  1,  9,  1,  9, 
     9,  9,  9,  9,  9,  9,  1,  9,  1,  0,  1,  1,  1,  1,  1,  0, 
     9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  9,  9,  1,  1,  0,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1, 
     1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  public static String curLine = "";
  public static int lineCount = 0;	
  public static boolean debug = false;
  public static int incrspaces = 0;

  public void addToLine(String s, int line) {
    if (line != lineCount) 
      curLine = s;
    else
      curLine = curLine + s;
    lineCount = line;
  }

  public void addLineComment() {
    String line = "Comment, line " + (yyline+1) + " [" + (yycolumn+1+incrspaces)  + ":" + (yycolumn+yylength()) + "]";
    String str = yytext();
    Token t = null;
    if (str.startsWith("/*"))
      t = new Token(Types.INSTANCE.MULTILINE_COMMENT, "Multi-line " + line, yyline+1, yycolumn+1, yycolumn + yylength());
    else
      t = new Token(Types.INSTANCE.SINGLELINE_COMMENT, "Single-line " + line, yyline+1, yycolumn+1, yycolumn + yylength());
  }

  public void countSpaces(int line) {
    incrspaces = line;
  }

  private java_cup.runtime.Symbol token(int kind) {
    Token t;
    addToLine(yytext(), yyline+1);
    t = new Token(kind, yytext(), yyline+1, yycolumn+1, yycolumn + yylength());
    if (debug)
      System.out.println(t);
    //System.out.println(">> " + new java_cup.runtime.Symbol(kind, t).value);
    return new java_cup.runtime.Symbol(kind, t);
  } 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[19527];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 6244) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      System.out.println(YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      System.out.println(YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }

    System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_counted = false;
          yycolumn++;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 353: 
          {  return token(sym.IMPLEMENTS);  }
        case 382: break;
        case 349: 
          {  return token(sym.PROTECTED);  }
        case 383: break;
        case 343: 
          {  return token(sym.PROTOCOL);  }
        case 384: break;
        case 342: 
          {  return token(sym.CONTINUE);  }
        case 385: break;
        case 337: 
          {  return token(sym.PRAGMA);  }
        case 386: break;
        case 336: 
          {  return token(sym.PACKAGE);  }
        case 387: break;
        case 335: 
          {  return token(sym.PRIVATE);  }
        case 388: break;
        case 331: 
          {  return token(sym.DEFAULT);  }
        case 389: break;
        case 329: 
          {  return token(sym.SUSPEND);  }
        case 390: break;
        case 328: 
          {  return token(sym.TIMEOUT);  }
        case 391: break;
        case 327: 
          {  return token(sym.EXTENDS);  }
        case 392: break;
        case 326: 
          {  return token(sym.BARRIER);  }
        case 393: break;
        case 325: 
          {  return token(sym.BOOLEAN);  }
        case 394: break;
        case 319: 
          {  return token(sym.PUBLIC);  }
        case 395: break;
        case 315: 
          {  return token(sym.MOBILE);  }
        case 396: break;
        case 312: 
          {  return token(sym.DOUBLE);  }
        case 397: break;
        case 310: 
          {  return token(sym.IMPORT);  }
        case 398: break;
        case 309: 
          {  return token(sym.SWITCH);  }
        case 399: break;
        case 308: 
          {  return token(sym.SHARED);  }
        case 400: break;
        case 307: 
          {  return token(sym.STRING);  }
        case 401: break;
        case 304: 
          {  return token(sym.NATIVE);  }
        case 402: break;
        case 302: 
          {  return token(sym.EXTERN);  }
        case 403: break;
        case 301: 
          {  return token(sym.ENROLL);  }
        case 404: break;
        case 298: 
          {  return token(sym.RECORD);  }
        case 405: break;
        case 297: 
          {  return token(sym.RESUME);  }
        case 406: break;
        case 296: 
          {  return token(sym.RETURN);  }
        case 407: break;
        case 284: 
          {  return token(sym.WHILE);  }
        case 408: break;
        case 283: 
          {  return token(sym.WRITE);  }
        case 409: break;
        case 282: 
          {  return token(sym.CLAIM);  }
        case 410: break;
        case 281: 
          {  return token(sym.CONST);  }
        case 411: break;
        case 273: 
          {  return token(sym.SHORT);  }
        case 412: break;
        case 269: 
          {  return token(sym.TIMER);  }
        case 413: break;
        case 264: 
          {  return token(sym.FLOAT);  }
        case 414: break;
        case 261: 
          {  return token(sym.BREAK);  }
        case 415: break;
        case 253: 
          {  return token(sym.RRSHIFTEQ);  }
        case 416: break;
        case 248: 
          {  return token(sym.PROC);  }
        case 417: break;
        case 245: 
          {  return token(sym.WITH);  }
        case 418: break;
        case 242: 
          {  return token(sym.VOID);  }
        case 419: break;
        case 241: 
          {  return token(sym.CHAN);  }
        case 420: break;
        case 240: 
          {  return token(sym.CHAR);  }
        case 421: break;
        case 239: 
          {  return token(sym.CASE);  }
        case 422: break;
        case 231: 
          {  return token(sym.SKIP);  }
        case 423: break;
        case 227: 
          {  return token(sym.STOP);  }
        case 424: break;
        case 225: 
          {  return token(sym.SYNC);  }
        case 425: break;
        case 222: 
          {  return token(sym.BOOLEAN_LITERAL);  }
        case 426: break;
        case 220: 
          {  return token(sym.NULL_LITERAL);  }
        case 427: break;
        case 217: 
          {  return token(sym.ELSE);  }
        case 428: break;
        case 216: 
          {  return token(sym.LONG);  }
        case 429: break;
        case 214: 
          {  return token(sym.FORK);  }
        case 430: break;
        case 65: 
          {  return token(sym.MINUSMINUS);  }
        case 431: break;
        case 61: 
          {  return token(sym.FLOAT_LITERAL);  }
        case 432: break;
        case 56: 
          {  return token(sym.LONG_LITERAL);  }
        case 433: break;
        case 55: 
        case 62: 
        case 64: 
        case 142: 
        case 374: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
          {  return token(sym.DOUBLE_LITERAL);  }
        case 434: break;
        case 53: 
          {  return token(sym.MULTEQ);  }
        case 435: break;
        case 52: 
          {  return token(sym.DIVEQ);  }
        case 436: break;
        case 50: 
        case 134: 
        case 135: 
          {  addToLine(yytext(), yyline+1); addLineComment();  }
        case 437: break;
        case 49: 
          {  return token(sym.COLON);  }
        case 438: break;
        case 48: 
          {  return token(sym.QUEST);  }
        case 439: break;
        case 47: 
          {  return token(sym.COMP);  }
        case 440: break;
        case 46: 
          {  return token(sym.NOT);  }
        case 441: break;
        case 45: 
          {  return token(sym.OR);  }
        case 442: break;
        case 44: 
          {  return token(sym.XOR);  }
        case 443: break;
        case 43: 
          {  return token(sym.AND);  }
        case 444: break;
        case 42: 
          {  return token(sym.GT);  }
        case 445: break;
        case 41: 
          {  return token(sym.LT);  }
        case 446: break;
        case 40: 
          {  return token(sym.PLUS);  }
        case 447: break;
        case 39: 
          {  return token(sym.MOD);  }
        case 448: break;
        case 10: 
          {  return token(sym.MINUS);  }
        case 449: break;
        case 9: 
          {  return token(sym.DOT);  }
        case 450: break;
        case 7: 
        case 8: 
        case 54: 
        case 58: 
        case 59: 
        case 60: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 202: 
        case 203: 
        case 204: 
        case 254: 
        case 255: 
        case 256: 
        case 292: 
        case 293: 
        case 294: 
        case 322: 
        case 323: 
        case 324: 
        case 338: 
        case 339: 
        case 340: 
        case 345: 
        case 346: 
        case 347: 
        case 350: 
        case 351: 
        case 352: 
        case 355: 
        case 356: 
        case 358: 
        case 359: 
        case 361: 
        case 362: 
        case 364: 
        case 365: 
        case 367: 
        case 368: 
        case 370: 
        case 371: 
        case 373: 
          {  return token(sym.INTEGER_LITERAL);  }
        case 451: break;
        case 6: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 101: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 164: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 193: 
        case 195: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 215: 
        case 218: 
        case 219: 
        case 221: 
        case 223: 
        case 224: 
        case 226: 
        case 228: 
        case 229: 
        case 230: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 243: 
        case 244: 
        case 246: 
        case 247: 
        case 249: 
        case 250: 
        case 251: 
        case 258: 
        case 259: 
        case 260: 
        case 262: 
        case 263: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 270: 
        case 271: 
        case 272: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 299: 
        case 300: 
        case 303: 
        case 305: 
        case 306: 
        case 311: 
        case 313: 
        case 314: 
        case 316: 
        case 317: 
        case 318: 
        case 320: 
        case 330: 
        case 332: 
        case 333: 
        case 334: 
        case 341: 
        case 344: 
        case 348: 
          {  return token(sym.IDENTIFIER);  }
        case 452: break;
        case 5: 
          {  return token(sym.MULT);  }
        case 453: break;
        case 4: 
          {  return token(sym.DIV);  }
        case 454: break;
        case 1: 
        case 11: 
        case 12: 
        case 29: 
          {  throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 455: break;
        case 30: 
          {  return token(sym.LPAREN);  }
        case 456: break;
        case 31: 
          {  return token(sym.RPAREN);  }
        case 457: break;
        case 32: 
          {  return token(sym.LBRACE);  }
        case 458: break;
        case 33: 
          {  return token(sym.RBRACE);  }
        case 459: break;
        case 34: 
          {  return token(sym.LBRACK);  }
        case 460: break;
        case 35: 
          {  return token(sym.RBRACK);  }
        case 461: break;
        case 36: 
          {  return token(sym.SEMICOLON);  }
        case 462: break;
        case 37: 
          {  return token(sym.COMMA);  }
        case 463: break;
        case 38: 
          {  return token(sym.EQ);  }
        case 464: break;
        case 66: 
          {  return token(sym.MINUSEQ);  }
        case 465: break;
        case 68: 
        case 69: 
          {  throw new RuntimeException("Unterminated string at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 466: break;
        case 70: 
          {  return token(sym.STRING_LITERAL);  }
        case 467: break;
        case 72: 
        case 73: 
          {  throw new RuntimeException("Unterminated character at end-of-line \""+yytext()+"\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 468: break;
        case 100: 
          {  return token(sym.IF);  }
        case 469: break;
        case 102: 
          {  return token(sym.IS);  }
        case 470: break;
        case 104: 
          {  return token(sym.DO);  }
        case 471: break;
        case 119: 
          {  return token(sym.EQEQ);  }
        case 472: break;
        case 120: 
          {  return token(sym.MODEQ);  }
        case 473: break;
        case 121: 
          {  return token(sym.PLUSEQ);  }
        case 474: break;
        case 122: 
          {  return token(sym.PLUSPLUS);  }
        case 475: break;
        case 123: 
          {  return token(sym.LTEQ);  }
        case 476: break;
        case 124: 
          {  return token(sym.LSHIFT);  }
        case 477: break;
        case 125: 
          {  return token(sym.GTEQ);  }
        case 478: break;
        case 126: 
          {  return token(sym.RSHIFT);  }
        case 479: break;
        case 127: 
          {  return token(sym.ANDEQ);  }
        case 480: break;
        case 128: 
          {  return token(sym.ANDAND);  }
        case 481: break;
        case 129: 
          {  return token(sym.XOREQ);  }
        case 482: break;
        case 130: 
          {  return token(sym.OREQ);  }
        case 483: break;
        case 131: 
          {  return token(sym.OROR);  }
        case 484: break;
        case 132: 
          {  return token(sym.NOTEQ);  }
        case 485: break;
        case 133: 
          {  return token(sym.COLONCOLON);  }
        case 486: break;
        case 136: 
        case 200: 
          {  throw new RuntimeException("Unterminated comment at EOF at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 487: break;
        case 144: 
          {  return token(sym.CHARACTER_LITERAL);  }
        case 488: break;
        case 156: 
          {  return token(sym.FOR);  }
        case 489: break;
        case 163: 
          {  return token(sym.ALT);  }
        case 490: break;
        case 165: 
          {  return token(sym.NEW);  }
        case 491: break;
        case 170: 
          {  return token(sym.SEQ);  }
        case 492: break;
        case 178: 
          {  return token(sym.INT);  }
        case 493: break;
        case 192: 
          {  return token(sym.PRI);  }
        case 494: break;
        case 194: 
          {  return token(sym.PAR);  }
        case 495: break;
        case 197: 
          {  return token(sym.LSHIFTEQ);  }
        case 496: break;
        case 198: 
          {  return token(sym.RSHIFTEQ);  }
        case 497: break;
        case 199: 
          {  return token(sym.RRSHIFT);  }
        case 498: break;
        case 206: 
          {  return token(sym.READ);  }
        case 499: break;
        case 213: 
          {  return token(sym.BYTE);  }
        case 500: break;
        case 2: 
        case 3: 
          {  addToLine(yytext(), yyline+1); countSpaces(yycolumn+1);
	//if (yytext().equals("\t")) yycolumn += 6; System.out.println(":::'" + yytext()+"'"); 
	 }
        case 501: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
