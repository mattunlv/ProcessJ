package utilities;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Iterator;
import java.util.Stack;

/**
 * This class is used to track down various kinds of error/warning
 * messages produced by the ProcessJ compiler at compile-time.
 * 
 * @author ben
 * @version 21/10/2018
 * @since 1.2
 */
public enum PJBugManager {
    
    INSTANCE;
    
    private static final String OUTFILE_NAME = "PJErrorfile";
    
    /** Number of errors messages generated by the compiler */
    private int errorNum;
    
    /** Number of warning messages generated by the compiler */
    private int warningNum;
    
    /** Number of info messages generated by the compiler */
    private int infoNum;
    
    /** Last registered message */
    private PJBugMessage postPonedMessage = null;
    
    /** List of errors/warning messages */
    private Stack<PJBugMessage> trace;
    
    /** Input file that contains error/warning messages */
    private String fileName = "";
    
    /** Location of input file */
    private String packageName = "";
    
    PJBugManager() {
        errorNum = 0;
        trace = new Stack<>();
    }
    
    private void addMessageAndExit(PJBugMessage bug, MessageNumber msg) {
        if (msg != null) {
            ErrorSeverity severity = msg.getErrorSeverity();
            switch (severity) {
            case INFO:
                ++infoNum;
            case WARNING:
                ++warningNum;
                break;
            case ERROR:
                ++errorNum;
                break;
            }
        } else
            ++errorNum;
        trace.push(bug);
    }
    
    public void reportMessageAndExit(PJBugMessage bug, MessageType type) {
        bug = Assert.nonNull(bug, "Compiler error message cannot be null");
        boolean stop = false;
        addMessageAndExit(bug, bug.getMessageNumber());
        switch(type) {
        case PRINT_STOP:
            stop = true;
        case PRINT_CONTINUE:
            // Throw the first error that occurred
            if (postPonedMessage == null)
                postPonedMessage = bug;
            System.out.println(bug.getRenderedMessage());
            if (stop)
                System.exit(1);
        case DONT_PRINT_CONTINUE:
            break;
        }
    }
    
    public void reportMessage(PJBugMessage bug) {
        MessageType type = MessageType.PRINT_STOP;
        if (bug.getMessageNumber() != null)
            type = bug.getMessageNumber().getMessageType();
        reportMessageAndExit(bug, type);
    }
    
    public int getErrorCount() {
        return errorNum;
    }
    
    public Stack<PJBugMessage> getTrace() {
        return trace;
    }
    
    public PJBugMessage getPostPonedMessage() {
        return postPonedMessage;
    }
    
    public void printTrace(String src) {
        System.out.println("The application panicked! (crashed).");
        System.out.println("Location: " + src);
        System.out.println("Message:");
        String line = PJUtil.addChar('-', 30);
        String header = line + " BACKTRACE " + line;
        System.out.println(header);
        System.out.println("| (" + errorNum + " post panic error messages)");
        System.out.println("| (" + warningNum + " post warning messages)");
        System.out.println("| (" + infoNum + " post info messages)");
        System.out.println("...");
        Iterator<PJBugMessage> it = trace.iterator();
        while (it.hasNext()) {
            System.out.println(it.next().getRenderedMessage());
            if (it.hasNext())
                System.out.println("...");
        }
    }
    
    public String getFileName() {
        return fileName;
    }
    
    public String getPackageName() {
        return packageName;
    }
    
    public void setPackageName(String name) {
        // First strip the 'Xxx.pj' part
        String str = name.replaceAll("\\.pj$", "");
        // Now remove the absolute path
        String absPath = new File("").getAbsolutePath() + "/";
        str = str.replaceAll(absPath, "");
        // Replace all '/' with '.'
        str = str.replaceAll("/", "\\.");
        packageName = str;
    }
    
    public void setFileName(String name) {
        // Remove all double '//:'
        String str = name.replaceAll("//","/");
        // Now remove the absolute path
        String absPath = new File("").getAbsolutePath() + "/";
        str = str.replaceAll(absPath,"");
        fileName = str;
    }
    
    public void writeBugsToFile(String dir) {
        // Write to current directory if none is provided
        if (dir == null || "".equals(dir))
            dir = new File("").getAbsolutePath() + File.separator;
        String outfile = dir + OUTFILE_NAME + ".txt";
        StringBuilder sb = new StringBuilder();
        for (PJBugMessage msg : trace) {
            sb.append(msg.getMessageNumber().getNumber());
            sb.append("\n");
        }
        Writer writer = null;
        try {
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outfile), "utf-8"));
            writer.write(sb.toString());
            writer.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
